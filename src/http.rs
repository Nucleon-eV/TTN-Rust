// This file is generated by rust-protobuf 2.6.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Http {
    // message fields
    pub rules: ::protobuf::RepeatedField<HttpRule>,
    pub fully_decode_reserved_expansion: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Http {
    fn default() -> &'a Http {
        <Http as ::protobuf::Message>::default_instance()
    }
}

impl Http {
    pub fn new() -> Http {
        ::std::default::Default::default()
    }

    // repeated .google.api.HttpRule rules = 1;


    pub fn get_rules(&self) -> &[HttpRule] {
        &self.rules
    }
    pub fn clear_rules(&mut self) {
        self.rules.clear();
    }

    // Param is passed by value, moved
    pub fn set_rules(&mut self, v: ::protobuf::RepeatedField<HttpRule>) {
        self.rules = v;
    }

    // Mutable pointer to the field.
    pub fn mut_rules(&mut self) -> &mut ::protobuf::RepeatedField<HttpRule> {
        &mut self.rules
    }

    // Take field
    pub fn take_rules(&mut self) -> ::protobuf::RepeatedField<HttpRule> {
        ::std::mem::replace(&mut self.rules, ::protobuf::RepeatedField::new())
    }

    // bool fully_decode_reserved_expansion = 2;


    pub fn get_fully_decode_reserved_expansion(&self) -> bool {
        self.fully_decode_reserved_expansion
    }
    pub fn clear_fully_decode_reserved_expansion(&mut self) {
        self.fully_decode_reserved_expansion = false;
    }

    // Param is passed by value, moved
    pub fn set_fully_decode_reserved_expansion(&mut self, v: bool) {
        self.fully_decode_reserved_expansion = v;
    }
}

impl ::protobuf::Message for Http {
    fn is_initialized(&self) -> bool {
        for v in &self.rules {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.rules)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.fully_decode_reserved_expansion = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.rules {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.fully_decode_reserved_expansion != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.rules {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.fully_decode_reserved_expansion != false {
            os.write_bool(2, self.fully_decode_reserved_expansion)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Http {
        Http::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<HttpRule>>(
                    "rules",
                    |m: &Http| { &m.rules },
                    |m: &mut Http| { &mut m.rules },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "fully_decode_reserved_expansion",
                    |m: &Http| { &m.fully_decode_reserved_expansion },
                    |m: &mut Http| { &mut m.fully_decode_reserved_expansion },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Http>(
                    "Http",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Http {
        static mut instance: ::protobuf::lazy::Lazy<Http> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Http,
        };
        unsafe {
            instance.get(Http::new)
        }
    }
}

impl ::protobuf::Clear for Http {
    fn clear(&mut self) {
        self.rules.clear();
        self.fully_decode_reserved_expansion = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Http {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Http {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HttpRule {
    // message fields
    pub selector: ::std::string::String,
    pub body: ::std::string::String,
    pub response_body: ::std::string::String,
    pub additional_bindings: ::protobuf::RepeatedField<HttpRule>,
    // message oneof groups
    pub pattern: ::std::option::Option<HttpRule_oneof_pattern>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HttpRule {
    fn default() -> &'a HttpRule {
        <HttpRule as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum HttpRule_oneof_pattern {
    get(::std::string::String),
    put(::std::string::String),
    post(::std::string::String),
    delete(::std::string::String),
    patch(::std::string::String),
    custom(CustomHttpPattern),
}

impl HttpRule {
    pub fn new() -> HttpRule {
        ::std::default::Default::default()
    }

    // string selector = 1;


    pub fn get_selector(&self) -> &str {
        &self.selector
    }
    pub fn clear_selector(&mut self) {
        self.selector.clear();
    }

    // Param is passed by value, moved
    pub fn set_selector(&mut self, v: ::std::string::String) {
        self.selector = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_selector(&mut self) -> &mut ::std::string::String {
        &mut self.selector
    }

    // Take field
    pub fn take_selector(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.selector, ::std::string::String::new())
    }

    // string get = 2;


    pub fn get_get(&self) -> &str {
        match self.pattern {
            ::std::option::Option::Some(HttpRule_oneof_pattern::get(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_get(&mut self) {
        self.pattern = ::std::option::Option::None;
    }

    pub fn has_get(&self) -> bool {
        match self.pattern {
            ::std::option::Option::Some(HttpRule_oneof_pattern::get(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_get(&mut self, v: ::std::string::String) {
        self.pattern = ::std::option::Option::Some(HttpRule_oneof_pattern::get(v))
    }

    // Mutable pointer to the field.
    pub fn mut_get(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(HttpRule_oneof_pattern::get(_)) = self.pattern {
        } else {
            self.pattern = ::std::option::Option::Some(HttpRule_oneof_pattern::get(::std::string::String::new()));
        }
        match self.pattern {
            ::std::option::Option::Some(HttpRule_oneof_pattern::get(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_get(&mut self) -> ::std::string::String {
        if self.has_get() {
            match self.pattern.take() {
                ::std::option::Option::Some(HttpRule_oneof_pattern::get(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // string put = 3;


    pub fn get_put(&self) -> &str {
        match self.pattern {
            ::std::option::Option::Some(HttpRule_oneof_pattern::put(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_put(&mut self) {
        self.pattern = ::std::option::Option::None;
    }

    pub fn has_put(&self) -> bool {
        match self.pattern {
            ::std::option::Option::Some(HttpRule_oneof_pattern::put(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_put(&mut self, v: ::std::string::String) {
        self.pattern = ::std::option::Option::Some(HttpRule_oneof_pattern::put(v))
    }

    // Mutable pointer to the field.
    pub fn mut_put(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(HttpRule_oneof_pattern::put(_)) = self.pattern {
        } else {
            self.pattern = ::std::option::Option::Some(HttpRule_oneof_pattern::put(::std::string::String::new()));
        }
        match self.pattern {
            ::std::option::Option::Some(HttpRule_oneof_pattern::put(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_put(&mut self) -> ::std::string::String {
        if self.has_put() {
            match self.pattern.take() {
                ::std::option::Option::Some(HttpRule_oneof_pattern::put(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // string post = 4;


    pub fn get_post(&self) -> &str {
        match self.pattern {
            ::std::option::Option::Some(HttpRule_oneof_pattern::post(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_post(&mut self) {
        self.pattern = ::std::option::Option::None;
    }

    pub fn has_post(&self) -> bool {
        match self.pattern {
            ::std::option::Option::Some(HttpRule_oneof_pattern::post(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_post(&mut self, v: ::std::string::String) {
        self.pattern = ::std::option::Option::Some(HttpRule_oneof_pattern::post(v))
    }

    // Mutable pointer to the field.
    pub fn mut_post(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(HttpRule_oneof_pattern::post(_)) = self.pattern {
        } else {
            self.pattern = ::std::option::Option::Some(HttpRule_oneof_pattern::post(::std::string::String::new()));
        }
        match self.pattern {
            ::std::option::Option::Some(HttpRule_oneof_pattern::post(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_post(&mut self) -> ::std::string::String {
        if self.has_post() {
            match self.pattern.take() {
                ::std::option::Option::Some(HttpRule_oneof_pattern::post(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // string delete = 5;


    pub fn get_delete(&self) -> &str {
        match self.pattern {
            ::std::option::Option::Some(HttpRule_oneof_pattern::delete(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_delete(&mut self) {
        self.pattern = ::std::option::Option::None;
    }

    pub fn has_delete(&self) -> bool {
        match self.pattern {
            ::std::option::Option::Some(HttpRule_oneof_pattern::delete(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_delete(&mut self, v: ::std::string::String) {
        self.pattern = ::std::option::Option::Some(HttpRule_oneof_pattern::delete(v))
    }

    // Mutable pointer to the field.
    pub fn mut_delete(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(HttpRule_oneof_pattern::delete(_)) = self.pattern {
        } else {
            self.pattern = ::std::option::Option::Some(HttpRule_oneof_pattern::delete(::std::string::String::new()));
        }
        match self.pattern {
            ::std::option::Option::Some(HttpRule_oneof_pattern::delete(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_delete(&mut self) -> ::std::string::String {
        if self.has_delete() {
            match self.pattern.take() {
                ::std::option::Option::Some(HttpRule_oneof_pattern::delete(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // string patch = 6;


    pub fn get_patch(&self) -> &str {
        match self.pattern {
            ::std::option::Option::Some(HttpRule_oneof_pattern::patch(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_patch(&mut self) {
        self.pattern = ::std::option::Option::None;
    }

    pub fn has_patch(&self) -> bool {
        match self.pattern {
            ::std::option::Option::Some(HttpRule_oneof_pattern::patch(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_patch(&mut self, v: ::std::string::String) {
        self.pattern = ::std::option::Option::Some(HttpRule_oneof_pattern::patch(v))
    }

    // Mutable pointer to the field.
    pub fn mut_patch(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(HttpRule_oneof_pattern::patch(_)) = self.pattern {
        } else {
            self.pattern = ::std::option::Option::Some(HttpRule_oneof_pattern::patch(::std::string::String::new()));
        }
        match self.pattern {
            ::std::option::Option::Some(HttpRule_oneof_pattern::patch(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_patch(&mut self) -> ::std::string::String {
        if self.has_patch() {
            match self.pattern.take() {
                ::std::option::Option::Some(HttpRule_oneof_pattern::patch(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // .google.api.CustomHttpPattern custom = 8;


    pub fn get_custom(&self) -> &CustomHttpPattern {
        match self.pattern {
            ::std::option::Option::Some(HttpRule_oneof_pattern::custom(ref v)) => v,
            _ => CustomHttpPattern::default_instance(),
        }
    }
    pub fn clear_custom(&mut self) {
        self.pattern = ::std::option::Option::None;
    }

    pub fn has_custom(&self) -> bool {
        match self.pattern {
            ::std::option::Option::Some(HttpRule_oneof_pattern::custom(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_custom(&mut self, v: CustomHttpPattern) {
        self.pattern = ::std::option::Option::Some(HttpRule_oneof_pattern::custom(v))
    }

    // Mutable pointer to the field.
    pub fn mut_custom(&mut self) -> &mut CustomHttpPattern {
        if let ::std::option::Option::Some(HttpRule_oneof_pattern::custom(_)) = self.pattern {
        } else {
            self.pattern = ::std::option::Option::Some(HttpRule_oneof_pattern::custom(CustomHttpPattern::new()));
        }
        match self.pattern {
            ::std::option::Option::Some(HttpRule_oneof_pattern::custom(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_custom(&mut self) -> CustomHttpPattern {
        if self.has_custom() {
            match self.pattern.take() {
                ::std::option::Option::Some(HttpRule_oneof_pattern::custom(v)) => v,
                _ => panic!(),
            }
        } else {
            CustomHttpPattern::new()
        }
    }

    // string body = 7;


    pub fn get_body(&self) -> &str {
        &self.body
    }
    pub fn clear_body(&mut self) {
        self.body.clear();
    }

    // Param is passed by value, moved
    pub fn set_body(&mut self, v: ::std::string::String) {
        self.body = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_body(&mut self) -> &mut ::std::string::String {
        &mut self.body
    }

    // Take field
    pub fn take_body(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.body, ::std::string::String::new())
    }

    // string response_body = 12;


    pub fn get_response_body(&self) -> &str {
        &self.response_body
    }
    pub fn clear_response_body(&mut self) {
        self.response_body.clear();
    }

    // Param is passed by value, moved
    pub fn set_response_body(&mut self, v: ::std::string::String) {
        self.response_body = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_response_body(&mut self) -> &mut ::std::string::String {
        &mut self.response_body
    }

    // Take field
    pub fn take_response_body(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.response_body, ::std::string::String::new())
    }

    // repeated .google.api.HttpRule additional_bindings = 11;


    pub fn get_additional_bindings(&self) -> &[HttpRule] {
        &self.additional_bindings
    }
    pub fn clear_additional_bindings(&mut self) {
        self.additional_bindings.clear();
    }

    // Param is passed by value, moved
    pub fn set_additional_bindings(&mut self, v: ::protobuf::RepeatedField<HttpRule>) {
        self.additional_bindings = v;
    }

    // Mutable pointer to the field.
    pub fn mut_additional_bindings(&mut self) -> &mut ::protobuf::RepeatedField<HttpRule> {
        &mut self.additional_bindings
    }

    // Take field
    pub fn take_additional_bindings(&mut self) -> ::protobuf::RepeatedField<HttpRule> {
        ::std::mem::replace(&mut self.additional_bindings, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for HttpRule {
    fn is_initialized(&self) -> bool {
        if let Some(HttpRule_oneof_pattern::custom(ref v)) = self.pattern {
            if !v.is_initialized() {
                return false;
            }
        }
        for v in &self.additional_bindings {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.selector)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.pattern = ::std::option::Option::Some(HttpRule_oneof_pattern::get(is.read_string()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.pattern = ::std::option::Option::Some(HttpRule_oneof_pattern::put(is.read_string()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.pattern = ::std::option::Option::Some(HttpRule_oneof_pattern::post(is.read_string()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.pattern = ::std::option::Option::Some(HttpRule_oneof_pattern::delete(is.read_string()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.pattern = ::std::option::Option::Some(HttpRule_oneof_pattern::patch(is.read_string()?));
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.pattern = ::std::option::Option::Some(HttpRule_oneof_pattern::custom(is.read_message()?));
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.body)?;
                },
                12 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.response_body)?;
                },
                11 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.additional_bindings)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.selector.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.selector);
        }
        if !self.body.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.body);
        }
        if !self.response_body.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.response_body);
        }
        for value in &self.additional_bindings {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let ::std::option::Option::Some(ref v) = self.pattern {
            match v {
                &HttpRule_oneof_pattern::get(ref v) => {
                    my_size += ::protobuf::rt::string_size(2, &v);
                },
                &HttpRule_oneof_pattern::put(ref v) => {
                    my_size += ::protobuf::rt::string_size(3, &v);
                },
                &HttpRule_oneof_pattern::post(ref v) => {
                    my_size += ::protobuf::rt::string_size(4, &v);
                },
                &HttpRule_oneof_pattern::delete(ref v) => {
                    my_size += ::protobuf::rt::string_size(5, &v);
                },
                &HttpRule_oneof_pattern::patch(ref v) => {
                    my_size += ::protobuf::rt::string_size(6, &v);
                },
                &HttpRule_oneof_pattern::custom(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.selector.is_empty() {
            os.write_string(1, &self.selector)?;
        }
        if !self.body.is_empty() {
            os.write_string(7, &self.body)?;
        }
        if !self.response_body.is_empty() {
            os.write_string(12, &self.response_body)?;
        }
        for v in &self.additional_bindings {
            os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let ::std::option::Option::Some(ref v) = self.pattern {
            match v {
                &HttpRule_oneof_pattern::get(ref v) => {
                    os.write_string(2, v)?;
                },
                &HttpRule_oneof_pattern::put(ref v) => {
                    os.write_string(3, v)?;
                },
                &HttpRule_oneof_pattern::post(ref v) => {
                    os.write_string(4, v)?;
                },
                &HttpRule_oneof_pattern::delete(ref v) => {
                    os.write_string(5, v)?;
                },
                &HttpRule_oneof_pattern::patch(ref v) => {
                    os.write_string(6, v)?;
                },
                &HttpRule_oneof_pattern::custom(ref v) => {
                    os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HttpRule {
        HttpRule::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "selector",
                    |m: &HttpRule| { &m.selector },
                    |m: &mut HttpRule| { &mut m.selector },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                    "get",
                    HttpRule::has_get,
                    HttpRule::get_get,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                    "put",
                    HttpRule::has_put,
                    HttpRule::get_put,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                    "post",
                    HttpRule::has_post,
                    HttpRule::get_post,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                    "delete",
                    HttpRule::has_delete,
                    HttpRule::get_delete,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                    "patch",
                    HttpRule::has_patch,
                    HttpRule::get_patch,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, CustomHttpPattern>(
                    "custom",
                    HttpRule::has_custom,
                    HttpRule::get_custom,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "body",
                    |m: &HttpRule| { &m.body },
                    |m: &mut HttpRule| { &mut m.body },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "response_body",
                    |m: &HttpRule| { &m.response_body },
                    |m: &mut HttpRule| { &mut m.response_body },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<HttpRule>>(
                    "additional_bindings",
                    |m: &HttpRule| { &m.additional_bindings },
                    |m: &mut HttpRule| { &mut m.additional_bindings },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<HttpRule>(
                    "HttpRule",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static HttpRule {
        static mut instance: ::protobuf::lazy::Lazy<HttpRule> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const HttpRule,
        };
        unsafe {
            instance.get(HttpRule::new)
        }
    }
}

impl ::protobuf::Clear for HttpRule {
    fn clear(&mut self) {
        self.selector.clear();
        self.pattern = ::std::option::Option::None;
        self.pattern = ::std::option::Option::None;
        self.pattern = ::std::option::Option::None;
        self.pattern = ::std::option::Option::None;
        self.pattern = ::std::option::Option::None;
        self.pattern = ::std::option::Option::None;
        self.body.clear();
        self.response_body.clear();
        self.additional_bindings.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HttpRule {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HttpRule {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CustomHttpPattern {
    // message fields
    pub kind: ::std::string::String,
    pub path: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CustomHttpPattern {
    fn default() -> &'a CustomHttpPattern {
        <CustomHttpPattern as ::protobuf::Message>::default_instance()
    }
}

impl CustomHttpPattern {
    pub fn new() -> CustomHttpPattern {
        ::std::default::Default::default()
    }

    // string kind = 1;


    pub fn get_kind(&self) -> &str {
        &self.kind
    }
    pub fn clear_kind(&mut self) {
        self.kind.clear();
    }

    // Param is passed by value, moved
    pub fn set_kind(&mut self, v: ::std::string::String) {
        self.kind = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_kind(&mut self) -> &mut ::std::string::String {
        &mut self.kind
    }

    // Take field
    pub fn take_kind(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.kind, ::std::string::String::new())
    }

    // string path = 2;


    pub fn get_path(&self) -> &str {
        &self.path
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::string::String) {
        self.path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::string::String {
        &mut self.path
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.path, ::std::string::String::new())
    }
}

impl ::protobuf::Message for CustomHttpPattern {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.kind)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.path)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.kind.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.kind);
        }
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.path);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.kind.is_empty() {
            os.write_string(1, &self.kind)?;
        }
        if !self.path.is_empty() {
            os.write_string(2, &self.path)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CustomHttpPattern {
        CustomHttpPattern::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "kind",
                    |m: &CustomHttpPattern| { &m.kind },
                    |m: &mut CustomHttpPattern| { &mut m.kind },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "path",
                    |m: &CustomHttpPattern| { &m.path },
                    |m: &mut CustomHttpPattern| { &mut m.path },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CustomHttpPattern>(
                    "CustomHttpPattern",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CustomHttpPattern {
        static mut instance: ::protobuf::lazy::Lazy<CustomHttpPattern> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CustomHttpPattern,
        };
        unsafe {
            instance.get(CustomHttpPattern::new)
        }
    }
}

impl ::protobuf::Clear for CustomHttpPattern {
    fn clear(&mut self) {
        self.kind.clear();
        self.path.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CustomHttpPattern {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CustomHttpPattern {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x15google/api/http.proto\x12\ngoogle.api\"y\n\x04Http\x12*\n\x05rules\
    \x18\x01\x20\x03(\x0b2\x14.google.api.HttpRuleR\x05rules\x12E\n\x1ffully\
    _decode_reserved_expansion\x18\x02\x20\x01(\x08R\x1cfullyDecodeReservedE\
    xpansion\"\xda\x02\n\x08HttpRule\x12\x1a\n\x08selector\x18\x01\x20\x01(\
    \tR\x08selector\x12\x12\n\x03get\x18\x02\x20\x01(\tH\0R\x03get\x12\x12\n\
    \x03put\x18\x03\x20\x01(\tH\0R\x03put\x12\x14\n\x04post\x18\x04\x20\x01(\
    \tH\0R\x04post\x12\x18\n\x06delete\x18\x05\x20\x01(\tH\0R\x06delete\x12\
    \x16\n\x05patch\x18\x06\x20\x01(\tH\0R\x05patch\x127\n\x06custom\x18\x08\
    \x20\x01(\x0b2\x1d.google.api.CustomHttpPatternH\0R\x06custom\x12\x12\n\
    \x04body\x18\x07\x20\x01(\tR\x04body\x12#\n\rresponse_body\x18\x0c\x20\
    \x01(\tR\x0cresponseBody\x12E\n\x13additional_bindings\x18\x0b\x20\x03(\
    \x0b2\x14.google.api.HttpRuleR\x12additionalBindingsB\t\n\x07pattern\";\
    \n\x11CustomHttpPattern\x12\x12\n\x04kind\x18\x01\x20\x01(\tR\x04kind\
    \x12\x12\n\x04path\x18\x02\x20\x01(\tR\x04pathBj\n\x0ecom.google.apiB\tH\
    ttpProtoP\x01ZAgoogle.golang.org/genproto/googleapis/api/annotations;ann\
    otations\xf8\x01\x01\xa2\x02\x04GAPIb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
