// This file is generated by rust-protobuf 2.6.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Metadata {
    // message fields
    pub modulation: Modulation,
    pub data_rate: ::std::string::String,
    pub bit_rate: u32,
    pub coding_rate: ::std::string::String,
    pub f_cnt: u32,
    pub frequency_plan: FrequencyPlan,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Metadata {
    fn default() -> &'a Metadata {
        <Metadata as ::protobuf::Message>::default_instance()
    }
}

impl Metadata {
    pub fn new() -> Metadata {
        ::std::default::Default::default()
    }

    // .lorawan.Modulation modulation = 11;


    pub fn get_modulation(&self) -> Modulation {
        self.modulation
    }
    pub fn clear_modulation(&mut self) {
        self.modulation = Modulation::LORA;
    }

    // Param is passed by value, moved
    pub fn set_modulation(&mut self, v: Modulation) {
        self.modulation = v;
    }

    // string data_rate = 12;


    pub fn get_data_rate(&self) -> &str {
        &self.data_rate
    }
    pub fn clear_data_rate(&mut self) {
        self.data_rate.clear();
    }

    // Param is passed by value, moved
    pub fn set_data_rate(&mut self, v: ::std::string::String) {
        self.data_rate = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data_rate(&mut self) -> &mut ::std::string::String {
        &mut self.data_rate
    }

    // Take field
    pub fn take_data_rate(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.data_rate, ::std::string::String::new())
    }

    // uint32 bit_rate = 13;


    pub fn get_bit_rate(&self) -> u32 {
        self.bit_rate
    }
    pub fn clear_bit_rate(&mut self) {
        self.bit_rate = 0;
    }

    // Param is passed by value, moved
    pub fn set_bit_rate(&mut self, v: u32) {
        self.bit_rate = v;
    }

    // string coding_rate = 14;


    pub fn get_coding_rate(&self) -> &str {
        &self.coding_rate
    }
    pub fn clear_coding_rate(&mut self) {
        self.coding_rate.clear();
    }

    // Param is passed by value, moved
    pub fn set_coding_rate(&mut self, v: ::std::string::String) {
        self.coding_rate = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_coding_rate(&mut self) -> &mut ::std::string::String {
        &mut self.coding_rate
    }

    // Take field
    pub fn take_coding_rate(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.coding_rate, ::std::string::String::new())
    }

    // uint32 f_cnt = 15;


    pub fn get_f_cnt(&self) -> u32 {
        self.f_cnt
    }
    pub fn clear_f_cnt(&mut self) {
        self.f_cnt = 0;
    }

    // Param is passed by value, moved
    pub fn set_f_cnt(&mut self, v: u32) {
        self.f_cnt = v;
    }

    // .lorawan.FrequencyPlan frequency_plan = 16;


    pub fn get_frequency_plan(&self) -> FrequencyPlan {
        self.frequency_plan
    }
    pub fn clear_frequency_plan(&mut self) {
        self.frequency_plan = FrequencyPlan::EU_863_870;
    }

    // Param is passed by value, moved
    pub fn set_frequency_plan(&mut self, v: FrequencyPlan) {
        self.frequency_plan = v;
    }
}

impl ::protobuf::Message for Metadata {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                11 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.modulation, 11, &mut self.unknown_fields)?
                },
                12 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.data_rate)?;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.bit_rate = tmp;
                },
                14 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.coding_rate)?;
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.f_cnt = tmp;
                },
                16 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.frequency_plan, 16, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.modulation != Modulation::LORA {
            my_size += ::protobuf::rt::enum_size(11, self.modulation);
        }
        if !self.data_rate.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.data_rate);
        }
        if self.bit_rate != 0 {
            my_size += ::protobuf::rt::value_size(13, self.bit_rate, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.coding_rate.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.coding_rate);
        }
        if self.f_cnt != 0 {
            my_size += ::protobuf::rt::value_size(15, self.f_cnt, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.frequency_plan != FrequencyPlan::EU_863_870 {
            my_size += ::protobuf::rt::enum_size(16, self.frequency_plan);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.modulation != Modulation::LORA {
            os.write_enum(11, self.modulation.value())?;
        }
        if !self.data_rate.is_empty() {
            os.write_string(12, &self.data_rate)?;
        }
        if self.bit_rate != 0 {
            os.write_uint32(13, self.bit_rate)?;
        }
        if !self.coding_rate.is_empty() {
            os.write_string(14, &self.coding_rate)?;
        }
        if self.f_cnt != 0 {
            os.write_uint32(15, self.f_cnt)?;
        }
        if self.frequency_plan != FrequencyPlan::EU_863_870 {
            os.write_enum(16, self.frequency_plan.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Metadata {
        Metadata::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Modulation>>(
                    "modulation",
                    |m: &Metadata| { &m.modulation },
                    |m: &mut Metadata| { &mut m.modulation },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "data_rate",
                    |m: &Metadata| { &m.data_rate },
                    |m: &mut Metadata| { &mut m.data_rate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "bit_rate",
                    |m: &Metadata| { &m.bit_rate },
                    |m: &mut Metadata| { &mut m.bit_rate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "coding_rate",
                    |m: &Metadata| { &m.coding_rate },
                    |m: &mut Metadata| { &mut m.coding_rate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "f_cnt",
                    |m: &Metadata| { &m.f_cnt },
                    |m: &mut Metadata| { &mut m.f_cnt },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<FrequencyPlan>>(
                    "frequency_plan",
                    |m: &Metadata| { &m.frequency_plan },
                    |m: &mut Metadata| { &mut m.frequency_plan },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Metadata>(
                    "Metadata",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Metadata {
        static mut instance: ::protobuf::lazy::Lazy<Metadata> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Metadata,
        };
        unsafe {
            instance.get(Metadata::new)
        }
    }
}

impl ::protobuf::Clear for Metadata {
    fn clear(&mut self) {
        self.modulation = Modulation::LORA;
        self.data_rate.clear();
        self.bit_rate = 0;
        self.coding_rate.clear();
        self.f_cnt = 0;
        self.frequency_plan = FrequencyPlan::EU_863_870;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Metadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Metadata {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TxConfiguration {
    // message fields
    pub modulation: Modulation,
    pub data_rate: ::std::string::String,
    pub bit_rate: u32,
    pub coding_rate: ::std::string::String,
    pub f_cnt: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TxConfiguration {
    fn default() -> &'a TxConfiguration {
        <TxConfiguration as ::protobuf::Message>::default_instance()
    }
}

impl TxConfiguration {
    pub fn new() -> TxConfiguration {
        ::std::default::Default::default()
    }

    // .lorawan.Modulation modulation = 11;


    pub fn get_modulation(&self) -> Modulation {
        self.modulation
    }
    pub fn clear_modulation(&mut self) {
        self.modulation = Modulation::LORA;
    }

    // Param is passed by value, moved
    pub fn set_modulation(&mut self, v: Modulation) {
        self.modulation = v;
    }

    // string data_rate = 12;


    pub fn get_data_rate(&self) -> &str {
        &self.data_rate
    }
    pub fn clear_data_rate(&mut self) {
        self.data_rate.clear();
    }

    // Param is passed by value, moved
    pub fn set_data_rate(&mut self, v: ::std::string::String) {
        self.data_rate = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data_rate(&mut self) -> &mut ::std::string::String {
        &mut self.data_rate
    }

    // Take field
    pub fn take_data_rate(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.data_rate, ::std::string::String::new())
    }

    // uint32 bit_rate = 13;


    pub fn get_bit_rate(&self) -> u32 {
        self.bit_rate
    }
    pub fn clear_bit_rate(&mut self) {
        self.bit_rate = 0;
    }

    // Param is passed by value, moved
    pub fn set_bit_rate(&mut self, v: u32) {
        self.bit_rate = v;
    }

    // string coding_rate = 14;


    pub fn get_coding_rate(&self) -> &str {
        &self.coding_rate
    }
    pub fn clear_coding_rate(&mut self) {
        self.coding_rate.clear();
    }

    // Param is passed by value, moved
    pub fn set_coding_rate(&mut self, v: ::std::string::String) {
        self.coding_rate = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_coding_rate(&mut self) -> &mut ::std::string::String {
        &mut self.coding_rate
    }

    // Take field
    pub fn take_coding_rate(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.coding_rate, ::std::string::String::new())
    }

    // uint32 f_cnt = 15;


    pub fn get_f_cnt(&self) -> u32 {
        self.f_cnt
    }
    pub fn clear_f_cnt(&mut self) {
        self.f_cnt = 0;
    }

    // Param is passed by value, moved
    pub fn set_f_cnt(&mut self, v: u32) {
        self.f_cnt = v;
    }
}

impl ::protobuf::Message for TxConfiguration {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                11 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.modulation, 11, &mut self.unknown_fields)?
                },
                12 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.data_rate)?;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.bit_rate = tmp;
                },
                14 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.coding_rate)?;
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.f_cnt = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.modulation != Modulation::LORA {
            my_size += ::protobuf::rt::enum_size(11, self.modulation);
        }
        if !self.data_rate.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.data_rate);
        }
        if self.bit_rate != 0 {
            my_size += ::protobuf::rt::value_size(13, self.bit_rate, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.coding_rate.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.coding_rate);
        }
        if self.f_cnt != 0 {
            my_size += ::protobuf::rt::value_size(15, self.f_cnt, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.modulation != Modulation::LORA {
            os.write_enum(11, self.modulation.value())?;
        }
        if !self.data_rate.is_empty() {
            os.write_string(12, &self.data_rate)?;
        }
        if self.bit_rate != 0 {
            os.write_uint32(13, self.bit_rate)?;
        }
        if !self.coding_rate.is_empty() {
            os.write_string(14, &self.coding_rate)?;
        }
        if self.f_cnt != 0 {
            os.write_uint32(15, self.f_cnt)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TxConfiguration {
        TxConfiguration::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Modulation>>(
                    "modulation",
                    |m: &TxConfiguration| { &m.modulation },
                    |m: &mut TxConfiguration| { &mut m.modulation },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "data_rate",
                    |m: &TxConfiguration| { &m.data_rate },
                    |m: &mut TxConfiguration| { &mut m.data_rate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "bit_rate",
                    |m: &TxConfiguration| { &m.bit_rate },
                    |m: &mut TxConfiguration| { &mut m.bit_rate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "coding_rate",
                    |m: &TxConfiguration| { &m.coding_rate },
                    |m: &mut TxConfiguration| { &mut m.coding_rate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "f_cnt",
                    |m: &TxConfiguration| { &m.f_cnt },
                    |m: &mut TxConfiguration| { &mut m.f_cnt },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TxConfiguration>(
                    "TxConfiguration",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TxConfiguration {
        static mut instance: ::protobuf::lazy::Lazy<TxConfiguration> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TxConfiguration,
        };
        unsafe {
            instance.get(TxConfiguration::new)
        }
    }
}

impl ::protobuf::Clear for TxConfiguration {
    fn clear(&mut self) {
        self.modulation = Modulation::LORA;
        self.data_rate.clear();
        self.bit_rate = 0;
        self.coding_rate.clear();
        self.f_cnt = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TxConfiguration {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TxConfiguration {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ActivationMetadata {
    // message fields
    pub app_eui: ::std::vec::Vec<u8>,
    pub dev_eui: ::std::vec::Vec<u8>,
    pub dev_addr: ::std::vec::Vec<u8>,
    pub nwk_s_key: ::std::vec::Vec<u8>,
    pub rx1_dr_offset: u32,
    pub rx2_dr: u32,
    pub rx_delay: u32,
    pub cf_list: ::protobuf::SingularPtrField<CFList>,
    pub frequency_plan: FrequencyPlan,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ActivationMetadata {
    fn default() -> &'a ActivationMetadata {
        <ActivationMetadata as ::protobuf::Message>::default_instance()
    }
}

impl ActivationMetadata {
    pub fn new() -> ActivationMetadata {
        ::std::default::Default::default()
    }

    // bytes app_eui = 1;


    pub fn get_app_eui(&self) -> &[u8] {
        &self.app_eui
    }
    pub fn clear_app_eui(&mut self) {
        self.app_eui.clear();
    }

    // Param is passed by value, moved
    pub fn set_app_eui(&mut self, v: ::std::vec::Vec<u8>) {
        self.app_eui = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_app_eui(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.app_eui
    }

    // Take field
    pub fn take_app_eui(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.app_eui, ::std::vec::Vec::new())
    }

    // bytes dev_eui = 2;


    pub fn get_dev_eui(&self) -> &[u8] {
        &self.dev_eui
    }
    pub fn clear_dev_eui(&mut self) {
        self.dev_eui.clear();
    }

    // Param is passed by value, moved
    pub fn set_dev_eui(&mut self, v: ::std::vec::Vec<u8>) {
        self.dev_eui = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dev_eui(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.dev_eui
    }

    // Take field
    pub fn take_dev_eui(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.dev_eui, ::std::vec::Vec::new())
    }

    // bytes dev_addr = 3;


    pub fn get_dev_addr(&self) -> &[u8] {
        &self.dev_addr
    }
    pub fn clear_dev_addr(&mut self) {
        self.dev_addr.clear();
    }

    // Param is passed by value, moved
    pub fn set_dev_addr(&mut self, v: ::std::vec::Vec<u8>) {
        self.dev_addr = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dev_addr(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.dev_addr
    }

    // Take field
    pub fn take_dev_addr(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.dev_addr, ::std::vec::Vec::new())
    }

    // bytes nwk_s_key = 4;


    pub fn get_nwk_s_key(&self) -> &[u8] {
        &self.nwk_s_key
    }
    pub fn clear_nwk_s_key(&mut self) {
        self.nwk_s_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_nwk_s_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.nwk_s_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_nwk_s_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.nwk_s_key
    }

    // Take field
    pub fn take_nwk_s_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.nwk_s_key, ::std::vec::Vec::new())
    }

    // uint32 rx1_dr_offset = 11;


    pub fn get_rx1_dr_offset(&self) -> u32 {
        self.rx1_dr_offset
    }
    pub fn clear_rx1_dr_offset(&mut self) {
        self.rx1_dr_offset = 0;
    }

    // Param is passed by value, moved
    pub fn set_rx1_dr_offset(&mut self, v: u32) {
        self.rx1_dr_offset = v;
    }

    // uint32 rx2_dr = 12;


    pub fn get_rx2_dr(&self) -> u32 {
        self.rx2_dr
    }
    pub fn clear_rx2_dr(&mut self) {
        self.rx2_dr = 0;
    }

    // Param is passed by value, moved
    pub fn set_rx2_dr(&mut self, v: u32) {
        self.rx2_dr = v;
    }

    // uint32 rx_delay = 13;


    pub fn get_rx_delay(&self) -> u32 {
        self.rx_delay
    }
    pub fn clear_rx_delay(&mut self) {
        self.rx_delay = 0;
    }

    // Param is passed by value, moved
    pub fn set_rx_delay(&mut self, v: u32) {
        self.rx_delay = v;
    }

    // .lorawan.CFList cf_list = 14;


    pub fn get_cf_list(&self) -> &CFList {
        self.cf_list.as_ref().unwrap_or_else(|| CFList::default_instance())
    }
    pub fn clear_cf_list(&mut self) {
        self.cf_list.clear();
    }

    pub fn has_cf_list(&self) -> bool {
        self.cf_list.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cf_list(&mut self, v: CFList) {
        self.cf_list = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cf_list(&mut self) -> &mut CFList {
        if self.cf_list.is_none() {
            self.cf_list.set_default();
        }
        self.cf_list.as_mut().unwrap()
    }

    // Take field
    pub fn take_cf_list(&mut self) -> CFList {
        self.cf_list.take().unwrap_or_else(|| CFList::new())
    }

    // .lorawan.FrequencyPlan frequency_plan = 15;


    pub fn get_frequency_plan(&self) -> FrequencyPlan {
        self.frequency_plan
    }
    pub fn clear_frequency_plan(&mut self) {
        self.frequency_plan = FrequencyPlan::EU_863_870;
    }

    // Param is passed by value, moved
    pub fn set_frequency_plan(&mut self, v: FrequencyPlan) {
        self.frequency_plan = v;
    }
}

impl ::protobuf::Message for ActivationMetadata {
    fn is_initialized(&self) -> bool {
        for v in &self.cf_list {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.app_eui)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.dev_eui)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.dev_addr)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.nwk_s_key)?;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.rx1_dr_offset = tmp;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.rx2_dr = tmp;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.rx_delay = tmp;
                },
                14 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.cf_list)?;
                },
                15 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.frequency_plan, 15, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.app_eui.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.app_eui);
        }
        if !self.dev_eui.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.dev_eui);
        }
        if !self.dev_addr.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.dev_addr);
        }
        if !self.nwk_s_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.nwk_s_key);
        }
        if self.rx1_dr_offset != 0 {
            my_size += ::protobuf::rt::value_size(11, self.rx1_dr_offset, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.rx2_dr != 0 {
            my_size += ::protobuf::rt::value_size(12, self.rx2_dr, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.rx_delay != 0 {
            my_size += ::protobuf::rt::value_size(13, self.rx_delay, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.cf_list.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.frequency_plan != FrequencyPlan::EU_863_870 {
            my_size += ::protobuf::rt::enum_size(15, self.frequency_plan);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.app_eui.is_empty() {
            os.write_bytes(1, &self.app_eui)?;
        }
        if !self.dev_eui.is_empty() {
            os.write_bytes(2, &self.dev_eui)?;
        }
        if !self.dev_addr.is_empty() {
            os.write_bytes(3, &self.dev_addr)?;
        }
        if !self.nwk_s_key.is_empty() {
            os.write_bytes(4, &self.nwk_s_key)?;
        }
        if self.rx1_dr_offset != 0 {
            os.write_uint32(11, self.rx1_dr_offset)?;
        }
        if self.rx2_dr != 0 {
            os.write_uint32(12, self.rx2_dr)?;
        }
        if self.rx_delay != 0 {
            os.write_uint32(13, self.rx_delay)?;
        }
        if let Some(ref v) = self.cf_list.as_ref() {
            os.write_tag(14, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.frequency_plan != FrequencyPlan::EU_863_870 {
            os.write_enum(15, self.frequency_plan.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ActivationMetadata {
        ActivationMetadata::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "app_eui",
                    |m: &ActivationMetadata| { &m.app_eui },
                    |m: &mut ActivationMetadata| { &mut m.app_eui },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "dev_eui",
                    |m: &ActivationMetadata| { &m.dev_eui },
                    |m: &mut ActivationMetadata| { &mut m.dev_eui },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "dev_addr",
                    |m: &ActivationMetadata| { &m.dev_addr },
                    |m: &mut ActivationMetadata| { &mut m.dev_addr },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "nwk_s_key",
                    |m: &ActivationMetadata| { &m.nwk_s_key },
                    |m: &mut ActivationMetadata| { &mut m.nwk_s_key },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "rx1_dr_offset",
                    |m: &ActivationMetadata| { &m.rx1_dr_offset },
                    |m: &mut ActivationMetadata| { &mut m.rx1_dr_offset },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "rx2_dr",
                    |m: &ActivationMetadata| { &m.rx2_dr },
                    |m: &mut ActivationMetadata| { &mut m.rx2_dr },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "rx_delay",
                    |m: &ActivationMetadata| { &m.rx_delay },
                    |m: &mut ActivationMetadata| { &mut m.rx_delay },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CFList>>(
                    "cf_list",
                    |m: &ActivationMetadata| { &m.cf_list },
                    |m: &mut ActivationMetadata| { &mut m.cf_list },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<FrequencyPlan>>(
                    "frequency_plan",
                    |m: &ActivationMetadata| { &m.frequency_plan },
                    |m: &mut ActivationMetadata| { &mut m.frequency_plan },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ActivationMetadata>(
                    "ActivationMetadata",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ActivationMetadata {
        static mut instance: ::protobuf::lazy::Lazy<ActivationMetadata> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ActivationMetadata,
        };
        unsafe {
            instance.get(ActivationMetadata::new)
        }
    }
}

impl ::protobuf::Clear for ActivationMetadata {
    fn clear(&mut self) {
        self.app_eui.clear();
        self.dev_eui.clear();
        self.dev_addr.clear();
        self.nwk_s_key.clear();
        self.rx1_dr_offset = 0;
        self.rx2_dr = 0;
        self.rx_delay = 0;
        self.cf_list.clear();
        self.frequency_plan = FrequencyPlan::EU_863_870;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ActivationMetadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ActivationMetadata {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Message {
    // message fields
    pub m_hdr: ::protobuf::SingularPtrField<MHDR>,
    pub mic: ::std::vec::Vec<u8>,
    // message oneof groups
    pub Payload: ::std::option::Option<Message_oneof_Payload>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Message {
    fn default() -> &'a Message {
        <Message as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Message_oneof_Payload {
    mac_payload(MACPayload),
    join_request_payload(JoinRequestPayload),
    join_accept_payload(JoinAcceptPayload),
}

impl Message {
    pub fn new() -> Message {
        ::std::default::Default::default()
    }

    // .lorawan.MHDR m_hdr = 1;


    pub fn get_m_hdr(&self) -> &MHDR {
        self.m_hdr.as_ref().unwrap_or_else(|| MHDR::default_instance())
    }
    pub fn clear_m_hdr(&mut self) {
        self.m_hdr.clear();
    }

    pub fn has_m_hdr(&self) -> bool {
        self.m_hdr.is_some()
    }

    // Param is passed by value, moved
    pub fn set_m_hdr(&mut self, v: MHDR) {
        self.m_hdr = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_m_hdr(&mut self) -> &mut MHDR {
        if self.m_hdr.is_none() {
            self.m_hdr.set_default();
        }
        self.m_hdr.as_mut().unwrap()
    }

    // Take field
    pub fn take_m_hdr(&mut self) -> MHDR {
        self.m_hdr.take().unwrap_or_else(|| MHDR::new())
    }

    // bytes mic = 2;


    pub fn get_mic(&self) -> &[u8] {
        &self.mic
    }
    pub fn clear_mic(&mut self) {
        self.mic.clear();
    }

    // Param is passed by value, moved
    pub fn set_mic(&mut self, v: ::std::vec::Vec<u8>) {
        self.mic = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mic(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.mic
    }

    // Take field
    pub fn take_mic(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.mic, ::std::vec::Vec::new())
    }

    // .lorawan.MACPayload mac_payload = 3;


    pub fn get_mac_payload(&self) -> &MACPayload {
        match self.Payload {
            ::std::option::Option::Some(Message_oneof_Payload::mac_payload(ref v)) => v,
            _ => MACPayload::default_instance(),
        }
    }
    pub fn clear_mac_payload(&mut self) {
        self.Payload = ::std::option::Option::None;
    }

    pub fn has_mac_payload(&self) -> bool {
        match self.Payload {
            ::std::option::Option::Some(Message_oneof_Payload::mac_payload(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_mac_payload(&mut self, v: MACPayload) {
        self.Payload = ::std::option::Option::Some(Message_oneof_Payload::mac_payload(v))
    }

    // Mutable pointer to the field.
    pub fn mut_mac_payload(&mut self) -> &mut MACPayload {
        if let ::std::option::Option::Some(Message_oneof_Payload::mac_payload(_)) = self.Payload {
        } else {
            self.Payload = ::std::option::Option::Some(Message_oneof_Payload::mac_payload(MACPayload::new()));
        }
        match self.Payload {
            ::std::option::Option::Some(Message_oneof_Payload::mac_payload(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_mac_payload(&mut self) -> MACPayload {
        if self.has_mac_payload() {
            match self.Payload.take() {
                ::std::option::Option::Some(Message_oneof_Payload::mac_payload(v)) => v,
                _ => panic!(),
            }
        } else {
            MACPayload::new()
        }
    }

    // .lorawan.JoinRequestPayload join_request_payload = 4;


    pub fn get_join_request_payload(&self) -> &JoinRequestPayload {
        match self.Payload {
            ::std::option::Option::Some(Message_oneof_Payload::join_request_payload(ref v)) => v,
            _ => JoinRequestPayload::default_instance(),
        }
    }
    pub fn clear_join_request_payload(&mut self) {
        self.Payload = ::std::option::Option::None;
    }

    pub fn has_join_request_payload(&self) -> bool {
        match self.Payload {
            ::std::option::Option::Some(Message_oneof_Payload::join_request_payload(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_join_request_payload(&mut self, v: JoinRequestPayload) {
        self.Payload = ::std::option::Option::Some(Message_oneof_Payload::join_request_payload(v))
    }

    // Mutable pointer to the field.
    pub fn mut_join_request_payload(&mut self) -> &mut JoinRequestPayload {
        if let ::std::option::Option::Some(Message_oneof_Payload::join_request_payload(_)) = self.Payload {
        } else {
            self.Payload = ::std::option::Option::Some(Message_oneof_Payload::join_request_payload(JoinRequestPayload::new()));
        }
        match self.Payload {
            ::std::option::Option::Some(Message_oneof_Payload::join_request_payload(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_join_request_payload(&mut self) -> JoinRequestPayload {
        if self.has_join_request_payload() {
            match self.Payload.take() {
                ::std::option::Option::Some(Message_oneof_Payload::join_request_payload(v)) => v,
                _ => panic!(),
            }
        } else {
            JoinRequestPayload::new()
        }
    }

    // .lorawan.JoinAcceptPayload join_accept_payload = 5;


    pub fn get_join_accept_payload(&self) -> &JoinAcceptPayload {
        match self.Payload {
            ::std::option::Option::Some(Message_oneof_Payload::join_accept_payload(ref v)) => v,
            _ => JoinAcceptPayload::default_instance(),
        }
    }
    pub fn clear_join_accept_payload(&mut self) {
        self.Payload = ::std::option::Option::None;
    }

    pub fn has_join_accept_payload(&self) -> bool {
        match self.Payload {
            ::std::option::Option::Some(Message_oneof_Payload::join_accept_payload(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_join_accept_payload(&mut self, v: JoinAcceptPayload) {
        self.Payload = ::std::option::Option::Some(Message_oneof_Payload::join_accept_payload(v))
    }

    // Mutable pointer to the field.
    pub fn mut_join_accept_payload(&mut self) -> &mut JoinAcceptPayload {
        if let ::std::option::Option::Some(Message_oneof_Payload::join_accept_payload(_)) = self.Payload {
        } else {
            self.Payload = ::std::option::Option::Some(Message_oneof_Payload::join_accept_payload(JoinAcceptPayload::new()));
        }
        match self.Payload {
            ::std::option::Option::Some(Message_oneof_Payload::join_accept_payload(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_join_accept_payload(&mut self) -> JoinAcceptPayload {
        if self.has_join_accept_payload() {
            match self.Payload.take() {
                ::std::option::Option::Some(Message_oneof_Payload::join_accept_payload(v)) => v,
                _ => panic!(),
            }
        } else {
            JoinAcceptPayload::new()
        }
    }
}

impl ::protobuf::Message for Message {
    fn is_initialized(&self) -> bool {
        for v in &self.m_hdr {
            if !v.is_initialized() {
                return false;
            }
        };
        if let Some(Message_oneof_Payload::mac_payload(ref v)) = self.Payload {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Message_oneof_Payload::join_request_payload(ref v)) = self.Payload {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Message_oneof_Payload::join_accept_payload(ref v)) = self.Payload {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.m_hdr)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.mic)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.Payload = ::std::option::Option::Some(Message_oneof_Payload::mac_payload(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.Payload = ::std::option::Option::Some(Message_oneof_Payload::join_request_payload(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.Payload = ::std::option::Option::Some(Message_oneof_Payload::join_accept_payload(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.m_hdr.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.mic.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.mic);
        }
        if let ::std::option::Option::Some(ref v) = self.Payload {
            match v {
                &Message_oneof_Payload::mac_payload(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Message_oneof_Payload::join_request_payload(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Message_oneof_Payload::join_accept_payload(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.m_hdr.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.mic.is_empty() {
            os.write_bytes(2, &self.mic)?;
        }
        if let ::std::option::Option::Some(ref v) = self.Payload {
            match v {
                &Message_oneof_Payload::mac_payload(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Message_oneof_Payload::join_request_payload(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Message_oneof_Payload::join_accept_payload(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Message {
        Message::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MHDR>>(
                    "m_hdr",
                    |m: &Message| { &m.m_hdr },
                    |m: &mut Message| { &mut m.m_hdr },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "mic",
                    |m: &Message| { &m.mic },
                    |m: &mut Message| { &mut m.mic },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, MACPayload>(
                    "mac_payload",
                    Message::has_mac_payload,
                    Message::get_mac_payload,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, JoinRequestPayload>(
                    "join_request_payload",
                    Message::has_join_request_payload,
                    Message::get_join_request_payload,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, JoinAcceptPayload>(
                    "join_accept_payload",
                    Message::has_join_accept_payload,
                    Message::get_join_accept_payload,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Message>(
                    "Message",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Message {
        static mut instance: ::protobuf::lazy::Lazy<Message> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Message,
        };
        unsafe {
            instance.get(Message::new)
        }
    }
}

impl ::protobuf::Clear for Message {
    fn clear(&mut self) {
        self.m_hdr.clear();
        self.mic.clear();
        self.Payload = ::std::option::Option::None;
        self.Payload = ::std::option::Option::None;
        self.Payload = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Message {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Message {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MHDR {
    // message fields
    pub m_type: MType,
    pub major: Major,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MHDR {
    fn default() -> &'a MHDR {
        <MHDR as ::protobuf::Message>::default_instance()
    }
}

impl MHDR {
    pub fn new() -> MHDR {
        ::std::default::Default::default()
    }

    // .lorawan.MType m_type = 1;


    pub fn get_m_type(&self) -> MType {
        self.m_type
    }
    pub fn clear_m_type(&mut self) {
        self.m_type = MType::JOIN_REQUEST;
    }

    // Param is passed by value, moved
    pub fn set_m_type(&mut self, v: MType) {
        self.m_type = v;
    }

    // .lorawan.Major major = 2;


    pub fn get_major(&self) -> Major {
        self.major
    }
    pub fn clear_major(&mut self) {
        self.major = Major::LORAWAN_R1;
    }

    // Param is passed by value, moved
    pub fn set_major(&mut self, v: Major) {
        self.major = v;
    }
}

impl ::protobuf::Message for MHDR {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.m_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.major, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.m_type != MType::JOIN_REQUEST {
            my_size += ::protobuf::rt::enum_size(1, self.m_type);
        }
        if self.major != Major::LORAWAN_R1 {
            my_size += ::protobuf::rt::enum_size(2, self.major);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.m_type != MType::JOIN_REQUEST {
            os.write_enum(1, self.m_type.value())?;
        }
        if self.major != Major::LORAWAN_R1 {
            os.write_enum(2, self.major.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MHDR {
        MHDR::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<MType>>(
                    "m_type",
                    |m: &MHDR| { &m.m_type },
                    |m: &mut MHDR| { &mut m.m_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Major>>(
                    "major",
                    |m: &MHDR| { &m.major },
                    |m: &mut MHDR| { &mut m.major },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<MHDR>(
                    "MHDR",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static MHDR {
        static mut instance: ::protobuf::lazy::Lazy<MHDR> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const MHDR,
        };
        unsafe {
            instance.get(MHDR::new)
        }
    }
}

impl ::protobuf::Clear for MHDR {
    fn clear(&mut self) {
        self.m_type = MType::JOIN_REQUEST;
        self.major = Major::LORAWAN_R1;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MHDR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MHDR {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MACPayload {
    // message fields
    pub f_hdr: ::protobuf::SingularPtrField<FHDR>,
    pub f_port: i32,
    pub frm_payload: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MACPayload {
    fn default() -> &'a MACPayload {
        <MACPayload as ::protobuf::Message>::default_instance()
    }
}

impl MACPayload {
    pub fn new() -> MACPayload {
        ::std::default::Default::default()
    }

    // .lorawan.FHDR f_hdr = 1;


    pub fn get_f_hdr(&self) -> &FHDR {
        self.f_hdr.as_ref().unwrap_or_else(|| FHDR::default_instance())
    }
    pub fn clear_f_hdr(&mut self) {
        self.f_hdr.clear();
    }

    pub fn has_f_hdr(&self) -> bool {
        self.f_hdr.is_some()
    }

    // Param is passed by value, moved
    pub fn set_f_hdr(&mut self, v: FHDR) {
        self.f_hdr = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_f_hdr(&mut self) -> &mut FHDR {
        if self.f_hdr.is_none() {
            self.f_hdr.set_default();
        }
        self.f_hdr.as_mut().unwrap()
    }

    // Take field
    pub fn take_f_hdr(&mut self) -> FHDR {
        self.f_hdr.take().unwrap_or_else(|| FHDR::new())
    }

    // int32 f_port = 2;


    pub fn get_f_port(&self) -> i32 {
        self.f_port
    }
    pub fn clear_f_port(&mut self) {
        self.f_port = 0;
    }

    // Param is passed by value, moved
    pub fn set_f_port(&mut self, v: i32) {
        self.f_port = v;
    }

    // bytes frm_payload = 3;


    pub fn get_frm_payload(&self) -> &[u8] {
        &self.frm_payload
    }
    pub fn clear_frm_payload(&mut self) {
        self.frm_payload.clear();
    }

    // Param is passed by value, moved
    pub fn set_frm_payload(&mut self, v: ::std::vec::Vec<u8>) {
        self.frm_payload = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_frm_payload(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.frm_payload
    }

    // Take field
    pub fn take_frm_payload(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.frm_payload, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for MACPayload {
    fn is_initialized(&self) -> bool {
        for v in &self.f_hdr {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.f_hdr)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.f_port = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.frm_payload)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.f_hdr.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.f_port != 0 {
            my_size += ::protobuf::rt::value_size(2, self.f_port, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.frm_payload.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.frm_payload);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.f_hdr.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.f_port != 0 {
            os.write_int32(2, self.f_port)?;
        }
        if !self.frm_payload.is_empty() {
            os.write_bytes(3, &self.frm_payload)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MACPayload {
        MACPayload::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<FHDR>>(
                    "f_hdr",
                    |m: &MACPayload| { &m.f_hdr },
                    |m: &mut MACPayload| { &mut m.f_hdr },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "f_port",
                    |m: &MACPayload| { &m.f_port },
                    |m: &mut MACPayload| { &mut m.f_port },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "frm_payload",
                    |m: &MACPayload| { &m.frm_payload },
                    |m: &mut MACPayload| { &mut m.frm_payload },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<MACPayload>(
                    "MACPayload",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static MACPayload {
        static mut instance: ::protobuf::lazy::Lazy<MACPayload> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const MACPayload,
        };
        unsafe {
            instance.get(MACPayload::new)
        }
    }
}

impl ::protobuf::Clear for MACPayload {
    fn clear(&mut self) {
        self.f_hdr.clear();
        self.f_port = 0;
        self.frm_payload.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MACPayload {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MACPayload {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FHDR {
    // message fields
    pub dev_addr: ::std::vec::Vec<u8>,
    pub f_ctrl: ::protobuf::SingularPtrField<FCtrl>,
    pub f_cnt: u32,
    pub f_opts: ::protobuf::RepeatedField<MACCommand>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FHDR {
    fn default() -> &'a FHDR {
        <FHDR as ::protobuf::Message>::default_instance()
    }
}

impl FHDR {
    pub fn new() -> FHDR {
        ::std::default::Default::default()
    }

    // bytes dev_addr = 1;


    pub fn get_dev_addr(&self) -> &[u8] {
        &self.dev_addr
    }
    pub fn clear_dev_addr(&mut self) {
        self.dev_addr.clear();
    }

    // Param is passed by value, moved
    pub fn set_dev_addr(&mut self, v: ::std::vec::Vec<u8>) {
        self.dev_addr = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dev_addr(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.dev_addr
    }

    // Take field
    pub fn take_dev_addr(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.dev_addr, ::std::vec::Vec::new())
    }

    // .lorawan.FCtrl f_ctrl = 2;


    pub fn get_f_ctrl(&self) -> &FCtrl {
        self.f_ctrl.as_ref().unwrap_or_else(|| FCtrl::default_instance())
    }
    pub fn clear_f_ctrl(&mut self) {
        self.f_ctrl.clear();
    }

    pub fn has_f_ctrl(&self) -> bool {
        self.f_ctrl.is_some()
    }

    // Param is passed by value, moved
    pub fn set_f_ctrl(&mut self, v: FCtrl) {
        self.f_ctrl = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_f_ctrl(&mut self) -> &mut FCtrl {
        if self.f_ctrl.is_none() {
            self.f_ctrl.set_default();
        }
        self.f_ctrl.as_mut().unwrap()
    }

    // Take field
    pub fn take_f_ctrl(&mut self) -> FCtrl {
        self.f_ctrl.take().unwrap_or_else(|| FCtrl::new())
    }

    // uint32 f_cnt = 3;


    pub fn get_f_cnt(&self) -> u32 {
        self.f_cnt
    }
    pub fn clear_f_cnt(&mut self) {
        self.f_cnt = 0;
    }

    // Param is passed by value, moved
    pub fn set_f_cnt(&mut self, v: u32) {
        self.f_cnt = v;
    }

    // repeated .lorawan.MACCommand f_opts = 4;


    pub fn get_f_opts(&self) -> &[MACCommand] {
        &self.f_opts
    }
    pub fn clear_f_opts(&mut self) {
        self.f_opts.clear();
    }

    // Param is passed by value, moved
    pub fn set_f_opts(&mut self, v: ::protobuf::RepeatedField<MACCommand>) {
        self.f_opts = v;
    }

    // Mutable pointer to the field.
    pub fn mut_f_opts(&mut self) -> &mut ::protobuf::RepeatedField<MACCommand> {
        &mut self.f_opts
    }

    // Take field
    pub fn take_f_opts(&mut self) -> ::protobuf::RepeatedField<MACCommand> {
        ::std::mem::replace(&mut self.f_opts, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for FHDR {
    fn is_initialized(&self) -> bool {
        for v in &self.f_ctrl {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.f_opts {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.dev_addr)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.f_ctrl)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.f_cnt = tmp;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.f_opts)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.dev_addr.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.dev_addr);
        }
        if let Some(ref v) = self.f_ctrl.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.f_cnt != 0 {
            my_size += ::protobuf::rt::value_size(3, self.f_cnt, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.f_opts {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.dev_addr.is_empty() {
            os.write_bytes(1, &self.dev_addr)?;
        }
        if let Some(ref v) = self.f_ctrl.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.f_cnt != 0 {
            os.write_uint32(3, self.f_cnt)?;
        }
        for v in &self.f_opts {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FHDR {
        FHDR::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "dev_addr",
                    |m: &FHDR| { &m.dev_addr },
                    |m: &mut FHDR| { &mut m.dev_addr },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<FCtrl>>(
                    "f_ctrl",
                    |m: &FHDR| { &m.f_ctrl },
                    |m: &mut FHDR| { &mut m.f_ctrl },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "f_cnt",
                    |m: &FHDR| { &m.f_cnt },
                    |m: &mut FHDR| { &mut m.f_cnt },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MACCommand>>(
                    "f_opts",
                    |m: &FHDR| { &m.f_opts },
                    |m: &mut FHDR| { &mut m.f_opts },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<FHDR>(
                    "FHDR",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static FHDR {
        static mut instance: ::protobuf::lazy::Lazy<FHDR> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const FHDR,
        };
        unsafe {
            instance.get(FHDR::new)
        }
    }
}

impl ::protobuf::Clear for FHDR {
    fn clear(&mut self) {
        self.dev_addr.clear();
        self.f_ctrl.clear();
        self.f_cnt = 0;
        self.f_opts.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FHDR {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FHDR {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FCtrl {
    // message fields
    pub adr: bool,
    pub adr_ack_req: bool,
    pub ack: bool,
    pub f_pending: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FCtrl {
    fn default() -> &'a FCtrl {
        <FCtrl as ::protobuf::Message>::default_instance()
    }
}

impl FCtrl {
    pub fn new() -> FCtrl {
        ::std::default::Default::default()
    }

    // bool adr = 1;


    pub fn get_adr(&self) -> bool {
        self.adr
    }
    pub fn clear_adr(&mut self) {
        self.adr = false;
    }

    // Param is passed by value, moved
    pub fn set_adr(&mut self, v: bool) {
        self.adr = v;
    }

    // bool adr_ack_req = 2;


    pub fn get_adr_ack_req(&self) -> bool {
        self.adr_ack_req
    }
    pub fn clear_adr_ack_req(&mut self) {
        self.adr_ack_req = false;
    }

    // Param is passed by value, moved
    pub fn set_adr_ack_req(&mut self, v: bool) {
        self.adr_ack_req = v;
    }

    // bool ack = 3;


    pub fn get_ack(&self) -> bool {
        self.ack
    }
    pub fn clear_ack(&mut self) {
        self.ack = false;
    }

    // Param is passed by value, moved
    pub fn set_ack(&mut self, v: bool) {
        self.ack = v;
    }

    // bool f_pending = 4;


    pub fn get_f_pending(&self) -> bool {
        self.f_pending
    }
    pub fn clear_f_pending(&mut self) {
        self.f_pending = false;
    }

    // Param is passed by value, moved
    pub fn set_f_pending(&mut self, v: bool) {
        self.f_pending = v;
    }
}

impl ::protobuf::Message for FCtrl {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.adr = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.adr_ack_req = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.ack = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.f_pending = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.adr != false {
            my_size += 2;
        }
        if self.adr_ack_req != false {
            my_size += 2;
        }
        if self.ack != false {
            my_size += 2;
        }
        if self.f_pending != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.adr != false {
            os.write_bool(1, self.adr)?;
        }
        if self.adr_ack_req != false {
            os.write_bool(2, self.adr_ack_req)?;
        }
        if self.ack != false {
            os.write_bool(3, self.ack)?;
        }
        if self.f_pending != false {
            os.write_bool(4, self.f_pending)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FCtrl {
        FCtrl::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "adr",
                    |m: &FCtrl| { &m.adr },
                    |m: &mut FCtrl| { &mut m.adr },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "adr_ack_req",
                    |m: &FCtrl| { &m.adr_ack_req },
                    |m: &mut FCtrl| { &mut m.adr_ack_req },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "ack",
                    |m: &FCtrl| { &m.ack },
                    |m: &mut FCtrl| { &mut m.ack },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "f_pending",
                    |m: &FCtrl| { &m.f_pending },
                    |m: &mut FCtrl| { &mut m.f_pending },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<FCtrl>(
                    "FCtrl",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static FCtrl {
        static mut instance: ::protobuf::lazy::Lazy<FCtrl> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const FCtrl,
        };
        unsafe {
            instance.get(FCtrl::new)
        }
    }
}

impl ::protobuf::Clear for FCtrl {
    fn clear(&mut self) {
        self.adr = false;
        self.adr_ack_req = false;
        self.ack = false;
        self.f_pending = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FCtrl {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FCtrl {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MACCommand {
    // message fields
    pub cid: u32,
    pub payload: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MACCommand {
    fn default() -> &'a MACCommand {
        <MACCommand as ::protobuf::Message>::default_instance()
    }
}

impl MACCommand {
    pub fn new() -> MACCommand {
        ::std::default::Default::default()
    }

    // uint32 cid = 1;


    pub fn get_cid(&self) -> u32 {
        self.cid
    }
    pub fn clear_cid(&mut self) {
        self.cid = 0;
    }

    // Param is passed by value, moved
    pub fn set_cid(&mut self, v: u32) {
        self.cid = v;
    }

    // bytes payload = 2;


    pub fn get_payload(&self) -> &[u8] {
        &self.payload
    }
    pub fn clear_payload(&mut self) {
        self.payload.clear();
    }

    // Param is passed by value, moved
    pub fn set_payload(&mut self, v: ::std::vec::Vec<u8>) {
        self.payload = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payload(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.payload
    }

    // Take field
    pub fn take_payload(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.payload, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for MACCommand {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.cid = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.payload)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.cid != 0 {
            my_size += ::protobuf::rt::value_size(1, self.cid, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.payload.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.payload);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.cid != 0 {
            os.write_uint32(1, self.cid)?;
        }
        if !self.payload.is_empty() {
            os.write_bytes(2, &self.payload)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MACCommand {
        MACCommand::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "cid",
                    |m: &MACCommand| { &m.cid },
                    |m: &mut MACCommand| { &mut m.cid },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "payload",
                    |m: &MACCommand| { &m.payload },
                    |m: &mut MACCommand| { &mut m.payload },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<MACCommand>(
                    "MACCommand",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static MACCommand {
        static mut instance: ::protobuf::lazy::Lazy<MACCommand> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const MACCommand,
        };
        unsafe {
            instance.get(MACCommand::new)
        }
    }
}

impl ::protobuf::Clear for MACCommand {
    fn clear(&mut self) {
        self.cid = 0;
        self.payload.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MACCommand {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MACCommand {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct JoinRequestPayload {
    // message fields
    pub app_eui: ::std::vec::Vec<u8>,
    pub dev_eui: ::std::vec::Vec<u8>,
    pub dev_nonce: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a JoinRequestPayload {
    fn default() -> &'a JoinRequestPayload {
        <JoinRequestPayload as ::protobuf::Message>::default_instance()
    }
}

impl JoinRequestPayload {
    pub fn new() -> JoinRequestPayload {
        ::std::default::Default::default()
    }

    // bytes app_eui = 1;


    pub fn get_app_eui(&self) -> &[u8] {
        &self.app_eui
    }
    pub fn clear_app_eui(&mut self) {
        self.app_eui.clear();
    }

    // Param is passed by value, moved
    pub fn set_app_eui(&mut self, v: ::std::vec::Vec<u8>) {
        self.app_eui = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_app_eui(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.app_eui
    }

    // Take field
    pub fn take_app_eui(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.app_eui, ::std::vec::Vec::new())
    }

    // bytes dev_eui = 2;


    pub fn get_dev_eui(&self) -> &[u8] {
        &self.dev_eui
    }
    pub fn clear_dev_eui(&mut self) {
        self.dev_eui.clear();
    }

    // Param is passed by value, moved
    pub fn set_dev_eui(&mut self, v: ::std::vec::Vec<u8>) {
        self.dev_eui = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dev_eui(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.dev_eui
    }

    // Take field
    pub fn take_dev_eui(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.dev_eui, ::std::vec::Vec::new())
    }

    // bytes dev_nonce = 3;


    pub fn get_dev_nonce(&self) -> &[u8] {
        &self.dev_nonce
    }
    pub fn clear_dev_nonce(&mut self) {
        self.dev_nonce.clear();
    }

    // Param is passed by value, moved
    pub fn set_dev_nonce(&mut self, v: ::std::vec::Vec<u8>) {
        self.dev_nonce = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dev_nonce(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.dev_nonce
    }

    // Take field
    pub fn take_dev_nonce(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.dev_nonce, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for JoinRequestPayload {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.app_eui)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.dev_eui)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.dev_nonce)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.app_eui.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.app_eui);
        }
        if !self.dev_eui.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.dev_eui);
        }
        if !self.dev_nonce.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.dev_nonce);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.app_eui.is_empty() {
            os.write_bytes(1, &self.app_eui)?;
        }
        if !self.dev_eui.is_empty() {
            os.write_bytes(2, &self.dev_eui)?;
        }
        if !self.dev_nonce.is_empty() {
            os.write_bytes(3, &self.dev_nonce)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> JoinRequestPayload {
        JoinRequestPayload::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "app_eui",
                    |m: &JoinRequestPayload| { &m.app_eui },
                    |m: &mut JoinRequestPayload| { &mut m.app_eui },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "dev_eui",
                    |m: &JoinRequestPayload| { &m.dev_eui },
                    |m: &mut JoinRequestPayload| { &mut m.dev_eui },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "dev_nonce",
                    |m: &JoinRequestPayload| { &m.dev_nonce },
                    |m: &mut JoinRequestPayload| { &mut m.dev_nonce },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<JoinRequestPayload>(
                    "JoinRequestPayload",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static JoinRequestPayload {
        static mut instance: ::protobuf::lazy::Lazy<JoinRequestPayload> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const JoinRequestPayload,
        };
        unsafe {
            instance.get(JoinRequestPayload::new)
        }
    }
}

impl ::protobuf::Clear for JoinRequestPayload {
    fn clear(&mut self) {
        self.app_eui.clear();
        self.dev_eui.clear();
        self.dev_nonce.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for JoinRequestPayload {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for JoinRequestPayload {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct JoinAcceptPayload {
    // message fields
    pub encrypted: ::std::vec::Vec<u8>,
    pub app_nonce: ::std::vec::Vec<u8>,
    pub net_id: ::std::vec::Vec<u8>,
    pub dev_addr: ::std::vec::Vec<u8>,
    pub dl_settings: ::protobuf::SingularPtrField<DLSettings>,
    pub rx_delay: u32,
    pub cf_list: ::protobuf::SingularPtrField<CFList>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a JoinAcceptPayload {
    fn default() -> &'a JoinAcceptPayload {
        <JoinAcceptPayload as ::protobuf::Message>::default_instance()
    }
}

impl JoinAcceptPayload {
    pub fn new() -> JoinAcceptPayload {
        ::std::default::Default::default()
    }

    // bytes encrypted = 1;


    pub fn get_encrypted(&self) -> &[u8] {
        &self.encrypted
    }
    pub fn clear_encrypted(&mut self) {
        self.encrypted.clear();
    }

    // Param is passed by value, moved
    pub fn set_encrypted(&mut self, v: ::std::vec::Vec<u8>) {
        self.encrypted = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_encrypted(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.encrypted
    }

    // Take field
    pub fn take_encrypted(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.encrypted, ::std::vec::Vec::new())
    }

    // bytes app_nonce = 2;


    pub fn get_app_nonce(&self) -> &[u8] {
        &self.app_nonce
    }
    pub fn clear_app_nonce(&mut self) {
        self.app_nonce.clear();
    }

    // Param is passed by value, moved
    pub fn set_app_nonce(&mut self, v: ::std::vec::Vec<u8>) {
        self.app_nonce = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_app_nonce(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.app_nonce
    }

    // Take field
    pub fn take_app_nonce(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.app_nonce, ::std::vec::Vec::new())
    }

    // bytes net_id = 3;


    pub fn get_net_id(&self) -> &[u8] {
        &self.net_id
    }
    pub fn clear_net_id(&mut self) {
        self.net_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_net_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.net_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_net_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.net_id
    }

    // Take field
    pub fn take_net_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.net_id, ::std::vec::Vec::new())
    }

    // bytes dev_addr = 4;


    pub fn get_dev_addr(&self) -> &[u8] {
        &self.dev_addr
    }
    pub fn clear_dev_addr(&mut self) {
        self.dev_addr.clear();
    }

    // Param is passed by value, moved
    pub fn set_dev_addr(&mut self, v: ::std::vec::Vec<u8>) {
        self.dev_addr = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dev_addr(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.dev_addr
    }

    // Take field
    pub fn take_dev_addr(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.dev_addr, ::std::vec::Vec::new())
    }

    // .lorawan.DLSettings dl_settings = 5;


    pub fn get_dl_settings(&self) -> &DLSettings {
        self.dl_settings.as_ref().unwrap_or_else(|| DLSettings::default_instance())
    }
    pub fn clear_dl_settings(&mut self) {
        self.dl_settings.clear();
    }

    pub fn has_dl_settings(&self) -> bool {
        self.dl_settings.is_some()
    }

    // Param is passed by value, moved
    pub fn set_dl_settings(&mut self, v: DLSettings) {
        self.dl_settings = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dl_settings(&mut self) -> &mut DLSettings {
        if self.dl_settings.is_none() {
            self.dl_settings.set_default();
        }
        self.dl_settings.as_mut().unwrap()
    }

    // Take field
    pub fn take_dl_settings(&mut self) -> DLSettings {
        self.dl_settings.take().unwrap_or_else(|| DLSettings::new())
    }

    // uint32 rx_delay = 6;


    pub fn get_rx_delay(&self) -> u32 {
        self.rx_delay
    }
    pub fn clear_rx_delay(&mut self) {
        self.rx_delay = 0;
    }

    // Param is passed by value, moved
    pub fn set_rx_delay(&mut self, v: u32) {
        self.rx_delay = v;
    }

    // .lorawan.CFList cf_list = 7;


    pub fn get_cf_list(&self) -> &CFList {
        self.cf_list.as_ref().unwrap_or_else(|| CFList::default_instance())
    }
    pub fn clear_cf_list(&mut self) {
        self.cf_list.clear();
    }

    pub fn has_cf_list(&self) -> bool {
        self.cf_list.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cf_list(&mut self, v: CFList) {
        self.cf_list = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cf_list(&mut self) -> &mut CFList {
        if self.cf_list.is_none() {
            self.cf_list.set_default();
        }
        self.cf_list.as_mut().unwrap()
    }

    // Take field
    pub fn take_cf_list(&mut self) -> CFList {
        self.cf_list.take().unwrap_or_else(|| CFList::new())
    }
}

impl ::protobuf::Message for JoinAcceptPayload {
    fn is_initialized(&self) -> bool {
        for v in &self.dl_settings {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.cf_list {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.encrypted)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.app_nonce)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.net_id)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.dev_addr)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.dl_settings)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.rx_delay = tmp;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.cf_list)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.encrypted.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.encrypted);
        }
        if !self.app_nonce.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.app_nonce);
        }
        if !self.net_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.net_id);
        }
        if !self.dev_addr.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.dev_addr);
        }
        if let Some(ref v) = self.dl_settings.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.rx_delay != 0 {
            my_size += ::protobuf::rt::value_size(6, self.rx_delay, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.cf_list.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.encrypted.is_empty() {
            os.write_bytes(1, &self.encrypted)?;
        }
        if !self.app_nonce.is_empty() {
            os.write_bytes(2, &self.app_nonce)?;
        }
        if !self.net_id.is_empty() {
            os.write_bytes(3, &self.net_id)?;
        }
        if !self.dev_addr.is_empty() {
            os.write_bytes(4, &self.dev_addr)?;
        }
        if let Some(ref v) = self.dl_settings.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.rx_delay != 0 {
            os.write_uint32(6, self.rx_delay)?;
        }
        if let Some(ref v) = self.cf_list.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> JoinAcceptPayload {
        JoinAcceptPayload::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "encrypted",
                    |m: &JoinAcceptPayload| { &m.encrypted },
                    |m: &mut JoinAcceptPayload| { &mut m.encrypted },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "app_nonce",
                    |m: &JoinAcceptPayload| { &m.app_nonce },
                    |m: &mut JoinAcceptPayload| { &mut m.app_nonce },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "net_id",
                    |m: &JoinAcceptPayload| { &m.net_id },
                    |m: &mut JoinAcceptPayload| { &mut m.net_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "dev_addr",
                    |m: &JoinAcceptPayload| { &m.dev_addr },
                    |m: &mut JoinAcceptPayload| { &mut m.dev_addr },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<DLSettings>>(
                    "dl_settings",
                    |m: &JoinAcceptPayload| { &m.dl_settings },
                    |m: &mut JoinAcceptPayload| { &mut m.dl_settings },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "rx_delay",
                    |m: &JoinAcceptPayload| { &m.rx_delay },
                    |m: &mut JoinAcceptPayload| { &mut m.rx_delay },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CFList>>(
                    "cf_list",
                    |m: &JoinAcceptPayload| { &m.cf_list },
                    |m: &mut JoinAcceptPayload| { &mut m.cf_list },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<JoinAcceptPayload>(
                    "JoinAcceptPayload",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static JoinAcceptPayload {
        static mut instance: ::protobuf::lazy::Lazy<JoinAcceptPayload> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const JoinAcceptPayload,
        };
        unsafe {
            instance.get(JoinAcceptPayload::new)
        }
    }
}

impl ::protobuf::Clear for JoinAcceptPayload {
    fn clear(&mut self) {
        self.encrypted.clear();
        self.app_nonce.clear();
        self.net_id.clear();
        self.dev_addr.clear();
        self.dl_settings.clear();
        self.rx_delay = 0;
        self.cf_list.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for JoinAcceptPayload {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for JoinAcceptPayload {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DLSettings {
    // message fields
    pub rx1_dr_offset: u32,
    pub rx2_dr: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DLSettings {
    fn default() -> &'a DLSettings {
        <DLSettings as ::protobuf::Message>::default_instance()
    }
}

impl DLSettings {
    pub fn new() -> DLSettings {
        ::std::default::Default::default()
    }

    // uint32 rx1_dr_offset = 1;


    pub fn get_rx1_dr_offset(&self) -> u32 {
        self.rx1_dr_offset
    }
    pub fn clear_rx1_dr_offset(&mut self) {
        self.rx1_dr_offset = 0;
    }

    // Param is passed by value, moved
    pub fn set_rx1_dr_offset(&mut self, v: u32) {
        self.rx1_dr_offset = v;
    }

    // uint32 rx2_dr = 2;


    pub fn get_rx2_dr(&self) -> u32 {
        self.rx2_dr
    }
    pub fn clear_rx2_dr(&mut self) {
        self.rx2_dr = 0;
    }

    // Param is passed by value, moved
    pub fn set_rx2_dr(&mut self, v: u32) {
        self.rx2_dr = v;
    }
}

impl ::protobuf::Message for DLSettings {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.rx1_dr_offset = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.rx2_dr = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.rx1_dr_offset != 0 {
            my_size += ::protobuf::rt::value_size(1, self.rx1_dr_offset, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.rx2_dr != 0 {
            my_size += ::protobuf::rt::value_size(2, self.rx2_dr, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.rx1_dr_offset != 0 {
            os.write_uint32(1, self.rx1_dr_offset)?;
        }
        if self.rx2_dr != 0 {
            os.write_uint32(2, self.rx2_dr)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DLSettings {
        DLSettings::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "rx1_dr_offset",
                    |m: &DLSettings| { &m.rx1_dr_offset },
                    |m: &mut DLSettings| { &mut m.rx1_dr_offset },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "rx2_dr",
                    |m: &DLSettings| { &m.rx2_dr },
                    |m: &mut DLSettings| { &mut m.rx2_dr },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DLSettings>(
                    "DLSettings",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DLSettings {
        static mut instance: ::protobuf::lazy::Lazy<DLSettings> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DLSettings,
        };
        unsafe {
            instance.get(DLSettings::new)
        }
    }
}

impl ::protobuf::Clear for DLSettings {
    fn clear(&mut self) {
        self.rx1_dr_offset = 0;
        self.rx2_dr = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DLSettings {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DLSettings {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CFList {
    // message fields
    pub freq: ::std::vec::Vec<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CFList {
    fn default() -> &'a CFList {
        <CFList as ::protobuf::Message>::default_instance()
    }
}

impl CFList {
    pub fn new() -> CFList {
        ::std::default::Default::default()
    }

    // repeated uint32 freq = 1;


    pub fn get_freq(&self) -> &[u32] {
        &self.freq
    }
    pub fn clear_freq(&mut self) {
        self.freq.clear();
    }

    // Param is passed by value, moved
    pub fn set_freq(&mut self, v: ::std::vec::Vec<u32>) {
        self.freq = v;
    }

    // Mutable pointer to the field.
    pub fn mut_freq(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.freq
    }

    // Take field
    pub fn take_freq(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.freq, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for CFList {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.freq)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.freq {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.freq {
            os.write_uint32(1, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CFList {
        CFList::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "freq",
                    |m: &CFList| { &m.freq },
                    |m: &mut CFList| { &mut m.freq },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CFList>(
                    "CFList",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CFList {
        static mut instance: ::protobuf::lazy::Lazy<CFList> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CFList,
        };
        unsafe {
            instance.get(CFList::new)
        }
    }
}

impl ::protobuf::Clear for CFList {
    fn clear(&mut self) {
        self.freq.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CFList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CFList {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Modulation {
    LORA = 0,
    FSK = 1,
}

impl ::protobuf::ProtobufEnum for Modulation {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Modulation> {
        match value {
            0 => ::std::option::Option::Some(Modulation::LORA),
            1 => ::std::option::Option::Some(Modulation::FSK),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Modulation] = &[
            Modulation::LORA,
            Modulation::FSK,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("Modulation", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for Modulation {
}

impl ::std::default::Default for Modulation {
    fn default() -> Self {
        Modulation::LORA
    }
}

impl ::protobuf::reflect::ProtobufValue for Modulation {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum FrequencyPlan {
    EU_863_870 = 0,
    US_902_928 = 1,
    CN_779_787 = 2,
    EU_433 = 3,
    AU_915_928 = 4,
    CN_470_510 = 5,
    AS_923 = 6,
    AS_920_923 = 61,
    AS_923_925 = 62,
    KR_920_923 = 7,
    IN_865_867 = 8,
    RU_864_870 = 9,
}

impl ::protobuf::ProtobufEnum for FrequencyPlan {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<FrequencyPlan> {
        match value {
            0 => ::std::option::Option::Some(FrequencyPlan::EU_863_870),
            1 => ::std::option::Option::Some(FrequencyPlan::US_902_928),
            2 => ::std::option::Option::Some(FrequencyPlan::CN_779_787),
            3 => ::std::option::Option::Some(FrequencyPlan::EU_433),
            4 => ::std::option::Option::Some(FrequencyPlan::AU_915_928),
            5 => ::std::option::Option::Some(FrequencyPlan::CN_470_510),
            6 => ::std::option::Option::Some(FrequencyPlan::AS_923),
            61 => ::std::option::Option::Some(FrequencyPlan::AS_920_923),
            62 => ::std::option::Option::Some(FrequencyPlan::AS_923_925),
            7 => ::std::option::Option::Some(FrequencyPlan::KR_920_923),
            8 => ::std::option::Option::Some(FrequencyPlan::IN_865_867),
            9 => ::std::option::Option::Some(FrequencyPlan::RU_864_870),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [FrequencyPlan] = &[
            FrequencyPlan::EU_863_870,
            FrequencyPlan::US_902_928,
            FrequencyPlan::CN_779_787,
            FrequencyPlan::EU_433,
            FrequencyPlan::AU_915_928,
            FrequencyPlan::CN_470_510,
            FrequencyPlan::AS_923,
            FrequencyPlan::AS_920_923,
            FrequencyPlan::AS_923_925,
            FrequencyPlan::KR_920_923,
            FrequencyPlan::IN_865_867,
            FrequencyPlan::RU_864_870,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("FrequencyPlan", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for FrequencyPlan {
}

impl ::std::default::Default for FrequencyPlan {
    fn default() -> Self {
        FrequencyPlan::EU_863_870
    }
}

impl ::protobuf::reflect::ProtobufValue for FrequencyPlan {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Major {
    LORAWAN_R1 = 0,
}

impl ::protobuf::ProtobufEnum for Major {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Major> {
        match value {
            0 => ::std::option::Option::Some(Major::LORAWAN_R1),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Major] = &[
            Major::LORAWAN_R1,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("Major", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for Major {
}

impl ::std::default::Default for Major {
    fn default() -> Self {
        Major::LORAWAN_R1
    }
}

impl ::protobuf::reflect::ProtobufValue for Major {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum MType {
    JOIN_REQUEST = 0,
    JOIN_ACCEPT = 1,
    UNCONFIRMED_UP = 2,
    UNCONFIRMED_DOWN = 3,
    CONFIRMED_UP = 4,
    CONFIRMED_DOWN = 5,
}

impl ::protobuf::ProtobufEnum for MType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<MType> {
        match value {
            0 => ::std::option::Option::Some(MType::JOIN_REQUEST),
            1 => ::std::option::Option::Some(MType::JOIN_ACCEPT),
            2 => ::std::option::Option::Some(MType::UNCONFIRMED_UP),
            3 => ::std::option::Option::Some(MType::UNCONFIRMED_DOWN),
            4 => ::std::option::Option::Some(MType::CONFIRMED_UP),
            5 => ::std::option::Option::Some(MType::CONFIRMED_DOWN),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [MType] = &[
            MType::JOIN_REQUEST,
            MType::JOIN_ACCEPT,
            MType::UNCONFIRMED_UP,
            MType::UNCONFIRMED_DOWN,
            MType::CONFIRMED_UP,
            MType::CONFIRMED_DOWN,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("MType", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for MType {
}

impl ::std::default::Default for MType {
    fn default() -> Self {
        MType::JOIN_REQUEST
    }
}

impl ::protobuf::reflect::ProtobufValue for MType {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n>github.com/TheThingsNetwork/api/protocol/lorawan/lorawan.proto\x12\
    \x07lorawan\x1a-github.com/gogo/protobuf/gogoproto/gogo.proto\"\xec\x01\
    \n\x08Metadata\x123\n\nmodulation\x18\x0b\x20\x01(\x0e2\x13.lorawan.Modu\
    lationR\nmodulation\x12\x1b\n\tdata_rate\x18\x0c\x20\x01(\tR\x08dataRate\
    \x12\x19\n\x08bit_rate\x18\r\x20\x01(\rR\x07bitRate\x12\x1f\n\x0bcoding_\
    rate\x18\x0e\x20\x01(\tR\ncodingRate\x12\x13\n\x05f_cnt\x18\x0f\x20\x01(\
    \rR\x04fCnt\x12=\n\x0efrequency_plan\x18\x10\x20\x01(\x0e2\x16.lorawan.F\
    requencyPlanR\rfrequencyPlan\"\xb4\x01\n\x0fTxConfiguration\x123\n\nmodu\
    lation\x18\x0b\x20\x01(\x0e2\x13.lorawan.ModulationR\nmodulation\x12\x1b\
    \n\tdata_rate\x18\x0c\x20\x01(\tR\x08dataRate\x12\x19\n\x08bit_rate\x18\
    \r\x20\x01(\rR\x07bitRate\x12\x1f\n\x0bcoding_rate\x18\x0e\x20\x01(\tR\n\
    codingRate\x12\x13\n\x05f_cnt\x18\x0f\x20\x01(\rR\x04fCnt\"\xde\x04\n\
    \x12ActivationMetadata\x12\\\n\x07app_eui\x18\x01\x20\x01(\x0cR\x06appEu\
    iBC\xda\xde\x1f1github.com/TheThingsNetwork/ttn/core/types.AppEUI\xc8\
    \xde\x1f\0\xe2\xde\x1f\x06AppEUI\x12\\\n\x07dev_eui\x18\x02\x20\x01(\x0c\
    R\x06devEuiBC\xc8\xde\x1f\0\xda\xde\x1f1github.com/TheThingsNetwork/ttn/\
    core/types.DevEUI\xe2\xde\x1f\x06DevEUI\x12Q\n\x08dev_addr\x18\x03\x20\
    \x01(\x0cR\x07devAddrB6\xda\xde\x1f2github.com/TheThingsNetwork/ttn/core\
    /types.DevAddr\x12R\n\tnwk_s_key\x18\x04\x20\x01(\x0cR\x07nwkSKeyB6\xda\
    \xde\x1f2github.com/TheThingsNetwork/ttn/core/types.NwkSKey\x123\n\rrx1_\
    dr_offset\x18\x0b\x20\x01(\rR\x0brx1DrOffsetB\x0f\xe2\xde\x1f\x0bRx1DROf\
    fset\x12\x20\n\x06rx2_dr\x18\x0c\x20\x01(\rR\x05rx2DrB\t\xe2\xde\x1f\x05\
    Rx2DR\x12\x19\n\x08rx_delay\x18\r\x20\x01(\rR\x07rxDelay\x124\n\x07cf_li\
    st\x18\x0e\x20\x01(\x0b2\x0f.lorawan.CFListR\x06cfListB\n\xe2\xde\x1f\
    \x06CFList\x12=\n\x0efrequency_plan\x18\x0f\x20\x01(\x0e2\x16.lorawan.Fr\
    equencyPlanR\rfrequencyPlan\"\xc4\x02\n\x07Message\x12,\n\x05m_hdr\x18\
    \x01\x20\x01(\x0b2\r.lorawan.MHDRR\x04mHdrB\x08\xc8\xde\x1f\0\xd0\xde\
    \x1f\x01\x12\x19\n\x03mic\x18\x02\x20\x01(\x0cR\x03micB\x07\xe2\xde\x1f\
    \x03MIC\x12F\n\x0bmac_payload\x18\x03\x20\x01(\x0b2\x13.lorawan.MACPaylo\
    adH\0R\nmacPayloadB\x0e\xe2\xde\x1f\nMACPayload\x12O\n\x14join_request_p\
    ayload\x18\x04\x20\x01(\x0b2\x1b.lorawan.JoinRequestPayloadH\0R\x12joinR\
    equestPayload\x12L\n\x13join_accept_payload\x18\x05\x20\x01(\x0b2\x1a.lo\
    rawan.JoinAcceptPayloadH\0R\x11joinAcceptPayloadB\t\n\x07Payload\"S\n\
    \x04MHDR\x12%\n\x06m_type\x18\x01\x20\x01(\x0e2\x0e.lorawan.MTypeR\x05mT\
    ype\x12$\n\x05major\x18\x02\x20\x01(\x0e2\x0e.lorawan.MajorR\x05major\"\
    \x82\x01\n\nMACPayload\x12,\n\x05f_hdr\x18\x01\x20\x01(\x0b2\r.lorawan.F\
    HDRR\x04fHdrB\x08\xd0\xde\x1f\x01\xc8\xde\x1f\0\x12\x15\n\x06f_port\x18\
    \x02\x20\x01(\x05R\x05fPort\x12/\n\x0bfrm_payload\x18\x03\x20\x01(\x0cR\
    \nfrmPayloadB\x0e\xe2\xde\x1f\nFRMPayload\"\xd5\x01\n\x04FHDR\x12U\n\x08\
    dev_addr\x18\x01\x20\x01(\x0cR\x07devAddrB:\xc8\xde\x1f\0\xda\xde\x1f2gi\
    thub.com/TheThingsNetwork/ttn/core/types.DevAddr\x12/\n\x06f_ctrl\x18\
    \x02\x20\x01(\x0b2\x0e.lorawan.FCtrlR\x05fCtrlB\x08\xd0\xde\x1f\x01\xc8\
    \xde\x1f\0\x12\x13\n\x05f_cnt\x18\x03\x20\x01(\rR\x04fCnt\x120\n\x06f_op\
    ts\x18\x04\x20\x03(\x0b2\x13.lorawan.MACCommandR\x05fOptsB\x04\xc8\xde\
    \x1f\0\"\x80\x01\n\x05FCtrl\x12\x19\n\x03adr\x18\x01\x20\x01(\x08R\x03ad\
    rB\x07\xe2\xde\x1f\x03ADR\x12-\n\x0badr_ack_req\x18\x02\x20\x01(\x08R\ta\
    drAckReqB\r\xe2\xde\x1f\tADRAckReq\x12\x10\n\x03ack\x18\x03\x20\x01(\x08\
    R\x03ack\x12\x1b\n\tf_pending\x18\x04\x20\x01(\x08R\x08fPending\"A\n\nMA\
    CCommand\x12\x19\n\x03cid\x18\x01\x20\x01(\rR\x03cidB\x07\xe2\xde\x1f\
    \x03CID\x12\x18\n\x07payload\x18\x02\x20\x01(\x0cR\x07payload\"\xaa\x02\
    \n\x12JoinRequestPayload\x12\\\n\x07app_eui\x18\x01\x20\x01(\x0cR\x06app\
    EuiBC\xda\xde\x1f1github.com/TheThingsNetwork/ttn/core/types.AppEUI\xe2\
    \xde\x1f\x06AppEUI\xc8\xde\x1f\0\x12\\\n\x07dev_eui\x18\x02\x20\x01(\x0c\
    R\x06devEuiBC\xe2\xde\x1f\x06DevEUI\xda\xde\x1f1github.com/TheThingsNetw\
    ork/ttn/core/types.DevEUI\xc8\xde\x1f\0\x12X\n\tdev_nonce\x18\x03\x20\
    \x01(\x0cR\x08devNonceB;\xc8\xde\x1f\0\xda\xde\x1f3github.com/TheThingsN\
    etwork/ttn/core/types.DevNonce\"\xcd\x03\n\x11JoinAcceptPayload\x12\x1c\
    \n\tencrypted\x18\x01\x20\x01(\x0cR\tencrypted\x12X\n\tapp_nonce\x18\x02\
    \x20\x01(\x0cR\x08appNonceB;\xda\xde\x1f3github.com/TheThingsNetwork/ttn\
    /core/types.AppNonce\xc8\xde\x1f\0\x12X\n\x06net_id\x18\x03\x20\x01(\x0c\
    R\x05netIdBA\xc8\xde\x1f\0\xe2\xde\x1f\x05NetID\xda\xde\x1f0github.com/T\
    heThingsNetwork/ttn/core/types.NetID\x12U\n\x08dev_addr\x18\x04\x20\x01(\
    \x0cR\x07devAddrB:\xda\xde\x1f2github.com/TheThingsNetwork/ttn/core/type\
    s.DevAddr\xc8\xde\x1f\0\x12>\n\x0bdl_settings\x18\x05\x20\x01(\x0b2\x13.\
    lorawan.DLSettingsR\ndlSettingsB\x08\xd0\xde\x1f\x01\xc8\xde\x1f\0\x12\
    \x19\n\x08rx_delay\x18\x06\x20\x01(\rR\x07rxDelay\x124\n\x07cf_list\x18\
    \x07\x20\x01(\x0b2\x0f.lorawan.CFListR\x06cfListB\n\xe2\xde\x1f\x06CFLis\
    t\"c\n\nDLSettings\x123\n\rrx1_dr_offset\x18\x01\x20\x01(\rR\x0brx1DrOff\
    setB\x0f\xe2\xde\x1f\x0bRx1DROffset\x12\x20\n\x06rx2_dr\x18\x02\x20\x01(\
    \rR\x05rx2DrB\t\xe2\xde\x1f\x05Rx2DR\"\x1c\n\x06CFList\x12\x12\n\x04freq\
    \x18\x01\x20\x03(\rR\x04freq*\x1f\n\nModulation\x12\x08\n\x04LORA\x10\0\
    \x12\x07\n\x03FSK\x10\x01*\xc7\x01\n\rFrequencyPlan\x12\x0e\n\nEU_863_87\
    0\x10\0\x12\x0e\n\nUS_902_928\x10\x01\x12\x0e\n\nCN_779_787\x10\x02\x12\
    \n\n\x06EU_433\x10\x03\x12\x0e\n\nAU_915_928\x10\x04\x12\x0e\n\nCN_470_5\
    10\x10\x05\x12\n\n\x06AS_923\x10\x06\x12\x0e\n\nAS_920_923\x10=\x12\x0e\
    \n\nAS_923_925\x10>\x12\x0e\n\nKR_920_923\x10\x07\x12\x0e\n\nIN_865_867\
    \x10\x08\x12\x0e\n\nRU_864_870\x10\t*\x17\n\x05Major\x12\x0e\n\nLORAWAN_\
    R1\x10\0*z\n\x05MType\x12\x10\n\x0cJOIN_REQUEST\x10\0\x12\x0f\n\x0bJOIN_\
    ACCEPT\x10\x01\x12\x12\n\x0eUNCONFIRMED_UP\x10\x02\x12\x14\n\x10UNCONFIR\
    MED_DOWN\x10\x03\x12\x10\n\x0cCONFIRMED_UP\x10\x04\x12\x12\n\x0eCONFIRME\
    D_DOWN\x10\x05B\x94\x01\n)org.thethingsnetwork.api.protocol.lorawanB\x0c\
    LoRaWANProtoP\x01Z0github.com/TheThingsNetwork/api/protocol/lorawan\xaa\
    \x02$TheThingsNetwork.API.LoRaWANProtocolb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
