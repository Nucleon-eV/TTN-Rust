// This file is generated by rust-protobuf 2.6.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Message {
    // message oneof groups
    pub protocol: ::std::option::Option<Message_oneof_protocol>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Message {
    fn default() -> &'a Message {
        <Message as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Message_oneof_protocol {
    lorawan(super::lorawan::Message),
}

impl Message {
    pub fn new() -> Message {
        ::std::default::Default::default()
    }

    // .lorawan.Message lorawan = 1;


    pub fn get_lorawan(&self) -> &super::lorawan::Message {
        match self.protocol {
            ::std::option::Option::Some(Message_oneof_protocol::lorawan(ref v)) => v,
            _ => super::lorawan::Message::default_instance(),
        }
    }
    pub fn clear_lorawan(&mut self) {
        self.protocol = ::std::option::Option::None;
    }

    pub fn has_lorawan(&self) -> bool {
        match self.protocol {
            ::std::option::Option::Some(Message_oneof_protocol::lorawan(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_lorawan(&mut self, v: super::lorawan::Message) {
        self.protocol = ::std::option::Option::Some(Message_oneof_protocol::lorawan(v))
    }

    // Mutable pointer to the field.
    pub fn mut_lorawan(&mut self) -> &mut super::lorawan::Message {
        if let ::std::option::Option::Some(Message_oneof_protocol::lorawan(_)) = self.protocol {
        } else {
            self.protocol = ::std::option::Option::Some(Message_oneof_protocol::lorawan(super::lorawan::Message::new()));
        }
        match self.protocol {
            ::std::option::Option::Some(Message_oneof_protocol::lorawan(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_lorawan(&mut self) -> super::lorawan::Message {
        if self.has_lorawan() {
            match self.protocol.take() {
                ::std::option::Option::Some(Message_oneof_protocol::lorawan(v)) => v,
                _ => panic!(),
            }
        } else {
            super::lorawan::Message::new()
        }
    }
}

impl ::protobuf::Message for Message {
    fn is_initialized(&self) -> bool {
        if let Some(Message_oneof_protocol::lorawan(ref v)) = self.protocol {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.protocol = ::std::option::Option::Some(Message_oneof_protocol::lorawan(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.protocol {
            match v {
                &Message_oneof_protocol::lorawan(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.protocol {
            match v {
                &Message_oneof_protocol::lorawan(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Message {
        Message::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::lorawan::Message>(
                    "lorawan",
                    Message::has_lorawan,
                    Message::get_lorawan,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Message>(
                    "Message",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Message {
        static mut instance: ::protobuf::lazy::Lazy<Message> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Message,
        };
        unsafe {
            instance.get(Message::new)
        }
    }
}

impl ::protobuf::Clear for Message {
    fn clear(&mut self) {
        self.protocol = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Message {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Message {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RxMetadata {
    // message oneof groups
    pub protocol: ::std::option::Option<RxMetadata_oneof_protocol>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RxMetadata {
    fn default() -> &'a RxMetadata {
        <RxMetadata as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum RxMetadata_oneof_protocol {
    lorawan(super::lorawan::Metadata),
}

impl RxMetadata {
    pub fn new() -> RxMetadata {
        ::std::default::Default::default()
    }

    // .lorawan.Metadata lorawan = 1;


    pub fn get_lorawan(&self) -> &super::lorawan::Metadata {
        match self.protocol {
            ::std::option::Option::Some(RxMetadata_oneof_protocol::lorawan(ref v)) => v,
            _ => super::lorawan::Metadata::default_instance(),
        }
    }
    pub fn clear_lorawan(&mut self) {
        self.protocol = ::std::option::Option::None;
    }

    pub fn has_lorawan(&self) -> bool {
        match self.protocol {
            ::std::option::Option::Some(RxMetadata_oneof_protocol::lorawan(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_lorawan(&mut self, v: super::lorawan::Metadata) {
        self.protocol = ::std::option::Option::Some(RxMetadata_oneof_protocol::lorawan(v))
    }

    // Mutable pointer to the field.
    pub fn mut_lorawan(&mut self) -> &mut super::lorawan::Metadata {
        if let ::std::option::Option::Some(RxMetadata_oneof_protocol::lorawan(_)) = self.protocol {
        } else {
            self.protocol = ::std::option::Option::Some(RxMetadata_oneof_protocol::lorawan(super::lorawan::Metadata::new()));
        }
        match self.protocol {
            ::std::option::Option::Some(RxMetadata_oneof_protocol::lorawan(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_lorawan(&mut self) -> super::lorawan::Metadata {
        if self.has_lorawan() {
            match self.protocol.take() {
                ::std::option::Option::Some(RxMetadata_oneof_protocol::lorawan(v)) => v,
                _ => panic!(),
            }
        } else {
            super::lorawan::Metadata::new()
        }
    }
}

impl ::protobuf::Message for RxMetadata {
    fn is_initialized(&self) -> bool {
        if let Some(RxMetadata_oneof_protocol::lorawan(ref v)) = self.protocol {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.protocol = ::std::option::Option::Some(RxMetadata_oneof_protocol::lorawan(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.protocol {
            match v {
                &RxMetadata_oneof_protocol::lorawan(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.protocol {
            match v {
                &RxMetadata_oneof_protocol::lorawan(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RxMetadata {
        RxMetadata::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::lorawan::Metadata>(
                    "lorawan",
                    RxMetadata::has_lorawan,
                    RxMetadata::get_lorawan,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RxMetadata>(
                    "RxMetadata",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RxMetadata {
        static mut instance: ::protobuf::lazy::Lazy<RxMetadata> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RxMetadata,
        };
        unsafe {
            instance.get(RxMetadata::new)
        }
    }
}

impl ::protobuf::Clear for RxMetadata {
    fn clear(&mut self) {
        self.protocol = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RxMetadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RxMetadata {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TxConfiguration {
    // message oneof groups
    pub protocol: ::std::option::Option<TxConfiguration_oneof_protocol>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TxConfiguration {
    fn default() -> &'a TxConfiguration {
        <TxConfiguration as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum TxConfiguration_oneof_protocol {
    lorawan(super::lorawan::TxConfiguration),
}

impl TxConfiguration {
    pub fn new() -> TxConfiguration {
        ::std::default::Default::default()
    }

    // .lorawan.TxConfiguration lorawan = 1;


    pub fn get_lorawan(&self) -> &super::lorawan::TxConfiguration {
        match self.protocol {
            ::std::option::Option::Some(TxConfiguration_oneof_protocol::lorawan(ref v)) => v,
            _ => super::lorawan::TxConfiguration::default_instance(),
        }
    }
    pub fn clear_lorawan(&mut self) {
        self.protocol = ::std::option::Option::None;
    }

    pub fn has_lorawan(&self) -> bool {
        match self.protocol {
            ::std::option::Option::Some(TxConfiguration_oneof_protocol::lorawan(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_lorawan(&mut self, v: super::lorawan::TxConfiguration) {
        self.protocol = ::std::option::Option::Some(TxConfiguration_oneof_protocol::lorawan(v))
    }

    // Mutable pointer to the field.
    pub fn mut_lorawan(&mut self) -> &mut super::lorawan::TxConfiguration {
        if let ::std::option::Option::Some(TxConfiguration_oneof_protocol::lorawan(_)) = self.protocol {
        } else {
            self.protocol = ::std::option::Option::Some(TxConfiguration_oneof_protocol::lorawan(super::lorawan::TxConfiguration::new()));
        }
        match self.protocol {
            ::std::option::Option::Some(TxConfiguration_oneof_protocol::lorawan(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_lorawan(&mut self) -> super::lorawan::TxConfiguration {
        if self.has_lorawan() {
            match self.protocol.take() {
                ::std::option::Option::Some(TxConfiguration_oneof_protocol::lorawan(v)) => v,
                _ => panic!(),
            }
        } else {
            super::lorawan::TxConfiguration::new()
        }
    }
}

impl ::protobuf::Message for TxConfiguration {
    fn is_initialized(&self) -> bool {
        if let Some(TxConfiguration_oneof_protocol::lorawan(ref v)) = self.protocol {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.protocol = ::std::option::Option::Some(TxConfiguration_oneof_protocol::lorawan(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.protocol {
            match v {
                &TxConfiguration_oneof_protocol::lorawan(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.protocol {
            match v {
                &TxConfiguration_oneof_protocol::lorawan(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TxConfiguration {
        TxConfiguration::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::lorawan::TxConfiguration>(
                    "lorawan",
                    TxConfiguration::has_lorawan,
                    TxConfiguration::get_lorawan,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TxConfiguration>(
                    "TxConfiguration",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TxConfiguration {
        static mut instance: ::protobuf::lazy::Lazy<TxConfiguration> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TxConfiguration,
        };
        unsafe {
            instance.get(TxConfiguration::new)
        }
    }
}

impl ::protobuf::Clear for TxConfiguration {
    fn clear(&mut self) {
        self.protocol = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TxConfiguration {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TxConfiguration {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ActivationMetadata {
    // message oneof groups
    pub protocol: ::std::option::Option<ActivationMetadata_oneof_protocol>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ActivationMetadata {
    fn default() -> &'a ActivationMetadata {
        <ActivationMetadata as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum ActivationMetadata_oneof_protocol {
    lorawan(super::lorawan::ActivationMetadata),
}

impl ActivationMetadata {
    pub fn new() -> ActivationMetadata {
        ::std::default::Default::default()
    }

    // .lorawan.ActivationMetadata lorawan = 1;


    pub fn get_lorawan(&self) -> &super::lorawan::ActivationMetadata {
        match self.protocol {
            ::std::option::Option::Some(ActivationMetadata_oneof_protocol::lorawan(ref v)) => v,
            _ => super::lorawan::ActivationMetadata::default_instance(),
        }
    }
    pub fn clear_lorawan(&mut self) {
        self.protocol = ::std::option::Option::None;
    }

    pub fn has_lorawan(&self) -> bool {
        match self.protocol {
            ::std::option::Option::Some(ActivationMetadata_oneof_protocol::lorawan(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_lorawan(&mut self, v: super::lorawan::ActivationMetadata) {
        self.protocol = ::std::option::Option::Some(ActivationMetadata_oneof_protocol::lorawan(v))
    }

    // Mutable pointer to the field.
    pub fn mut_lorawan(&mut self) -> &mut super::lorawan::ActivationMetadata {
        if let ::std::option::Option::Some(ActivationMetadata_oneof_protocol::lorawan(_)) = self.protocol {
        } else {
            self.protocol = ::std::option::Option::Some(ActivationMetadata_oneof_protocol::lorawan(super::lorawan::ActivationMetadata::new()));
        }
        match self.protocol {
            ::std::option::Option::Some(ActivationMetadata_oneof_protocol::lorawan(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_lorawan(&mut self) -> super::lorawan::ActivationMetadata {
        if self.has_lorawan() {
            match self.protocol.take() {
                ::std::option::Option::Some(ActivationMetadata_oneof_protocol::lorawan(v)) => v,
                _ => panic!(),
            }
        } else {
            super::lorawan::ActivationMetadata::new()
        }
    }
}

impl ::protobuf::Message for ActivationMetadata {
    fn is_initialized(&self) -> bool {
        if let Some(ActivationMetadata_oneof_protocol::lorawan(ref v)) = self.protocol {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.protocol = ::std::option::Option::Some(ActivationMetadata_oneof_protocol::lorawan(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.protocol {
            match v {
                &ActivationMetadata_oneof_protocol::lorawan(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.protocol {
            match v {
                &ActivationMetadata_oneof_protocol::lorawan(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ActivationMetadata {
        ActivationMetadata::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::lorawan::ActivationMetadata>(
                    "lorawan",
                    ActivationMetadata::has_lorawan,
                    ActivationMetadata::get_lorawan,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ActivationMetadata>(
                    "ActivationMetadata",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ActivationMetadata {
        static mut instance: ::protobuf::lazy::Lazy<ActivationMetadata> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ActivationMetadata,
        };
        unsafe {
            instance.get(ActivationMetadata::new)
        }
    }
}

impl ::protobuf::Clear for ActivationMetadata {
    fn clear(&mut self) {
        self.protocol = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ActivationMetadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ActivationMetadata {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n7github.com/TheThingsNetwork/api/protocol/protocol.proto\x12\x08protoc\
    ol\x1a-github.com/gogo/protobuf/gogoproto/gogo.proto\x1a>github.com/TheT\
    hingsNetwork/api/protocol/lorawan/lorawan.proto\"P\n\x07Message\x129\n\
    \x07lorawan\x18\x01\x20\x01(\x0b2\x10.lorawan.MessageH\0R\x07lorawanB\
    \x0b\xe2\xde\x1f\x07LoRaWANB\n\n\x08protocol\"T\n\nRxMetadata\x12:\n\x07\
    lorawan\x18\x01\x20\x01(\x0b2\x11.lorawan.MetadataH\0R\x07lorawanB\x0b\
    \xe2\xde\x1f\x07LoRaWANB\n\n\x08protocol\"`\n\x0fTxConfiguration\x12A\n\
    \x07lorawan\x18\x01\x20\x01(\x0b2\x18.lorawan.TxConfigurationH\0R\x07lor\
    awanB\x0b\xe2\xde\x1f\x07LoRaWANB\n\n\x08protocol\"f\n\x12ActivationMeta\
    data\x12D\n\x07lorawan\x18\x01\x20\x01(\x0b2\x1b.lorawan.ActivationMetad\
    ataH\0R\x07lorawanB\x0b\xe2\xde\x1f\x07LoRaWANB\n\n\x08protocolB~\n!org.\
    thethingsnetwork.api.protocolB\rProtocolProtoP\x01Z(github.com/TheThings\
    Network/api/protocol\xaa\x02\x1dTheThingsNetwork.API.Protocolb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
